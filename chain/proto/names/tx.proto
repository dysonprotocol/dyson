syntax = "proto3";
package names;

import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

import "names/name.proto";
// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/org/dyson/x/names/types";

// Msg defines the Msg service.
service Msg {
  rpc Register(MsgRegister) returns (MsgRegisterResponse);
  rpc UpdateName(MsgUpdateName) returns (MsgUpdateNameResponse);
  rpc DeleteName(MsgDeleteName) returns (MsgDeleteNameResponse);
  rpc Reveal(MsgReveal) returns (MsgRevealResponse);
  rpc SetPriceAndExtend(MsgSetPriceAndExtend) returns (MsgSetPriceAndExtendResponse);
  rpc OfferTo(MsgOfferTo) returns (MsgOfferToResponse);
  rpc Accept(MsgAccept) returns (MsgAcceptResponse);
  rpc Buy(MsgBuy) returns (MsgBuyResponse);
  rpc MintCoins(MsgMintCoins) returns (MsgMintCoinsResponse);
  rpc BurnCoins(MsgBurnCoins) returns (MsgBurnCoinsResponse);
  rpc SetNftClass(MsgSetNftClass) returns (MsgSetNftClassResponse);
  rpc MintNft(MsgMintNft) returns (MsgMintNftResponse);
  rpc UpdateNft(MsgUpdateNft) returns (MsgUpdateNftResponse);
  rpc BurnNft(MsgBurnNft) returns (MsgBurnNftResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgRegister {
  // The Shake256(owner+name+salt) hexdigest
  string commit = 2;
  // Address of the owner
  string owner = 1;
  // The price that this name is valued at and can be purchased for example 100dys. The monthly fee is 1% of this price. 
  string price = 4;
  // Should the name be automatically renewed 
  bool auto_renew = 5;
}

message MsgRegisterResponse {
  // fee paid which is 1% of the price
  string fee = 1;
  uint64 expiration_height = 3;
}

message MsgUpdateName {
  string name = 2;
  string owner = 1;
  string destination = 3;
  string authorized = 6;
  bool auto_renew = 7;
}
message MsgUpdateNameResponse {}

message MsgDeleteName {
  string name = 2;
  string owner = 1;
}
message MsgDeleteNameResponse {}

message MsgReveal {
  string name = 2;
  string owner = 1;
  string salt = 3;
}

message MsgRevealResponse {
  Name name = 1;
}

message MsgSetPriceAndExtend {
  string name = 2;
  string owner = 1;
  string price = 3;
}

message MsgSetPriceAndExtendResponse {
}

message MsgOfferTo {
  string name = 2;
  string owner = 1;
  string new_owner = 3;
}

message MsgOfferToResponse {
}

message MsgAccept {
  string name = 2;
  string new_owner = 1;
}

message MsgAcceptResponse {
}

message MsgBuy {
  string buyer = 1;
  string name = 2;
}

message MsgBuyResponse {
}

message MsgMintCoins {
  string owner = 1;
  // The amount of coins to mint, each coin costs 1 gas
  string amount = 2;
}

message MsgMintCoinsResponse {
}

message MsgBurnCoins {
  string owner = 1;
  string amount = 2;
}

message MsgBurnCoinsResponse {
}

message MsgSetNftClass {
  // The owner of the Dys name
  string owner = 1;
  // the ID is the Dys name
  string id = 2;
  // More descriptive name
  string name = 3;
  string symbol = 4;
  string description = 5;
  string uri = 6;
  string urihash = 7;
}

message MsgSetNftClassResponse {
}

message MsgMintNft {
  // The owner of the Dys name
  string class_owner = 1;
  // the ClassID the  Dys name
  string class_id = 2;
  string id = 3;
  string uri = 4;
  string urihash = 5;
  string data = 6;
}

message MsgMintNftResponse {
}

message MsgUpdateNft {
  // The owner of the Dys name
  string class_owner = 1;
  // The dys name that the NFT was create with
  string class_id = 2;
  // The ID of this NFT
  string id = 3;
  string uri = 4;
  string urihash = 5;
  string data = 6;
}

message MsgUpdateNftResponse {
}

message MsgBurnNft {
  // The owner of the Dys name
  string class_owner = 1;
  // The dys name that the NFT was create with
  string class_id = 2;
  // The ID of this NFT
  string id = 3;
}

message MsgBurnNftResponse {
}

// this line is used by starport scaffolding # proto/tx/message
