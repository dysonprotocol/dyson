// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: names/name.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Name struct {
	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Destination        string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	Price              string `protobuf:"bytes,3,opt,name=price,proto3" json:"price,omitempty"`
	Authorized         string `protobuf:"bytes,5,opt,name=authorized,proto3" json:"authorized,omitempty"`
	Owner              string `protobuf:"bytes,8,opt,name=owner,proto3" json:"owner,omitempty"`
	ExpirationHeight   uint64 `protobuf:"varint,11,opt,name=expiration_height,json=expirationHeight,proto3" json:"expiration_height,omitempty"`
	RegistrationHeight uint64 `protobuf:"varint,12,opt,name=registration_height,json=registrationHeight,proto3" json:"registration_height,omitempty"`
}

func (m *Name) Reset()         { *m = Name{} }
func (m *Name) String() string { return proto.CompactTextString(m) }
func (*Name) ProtoMessage()    {}
func (*Name) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1cfc2bb23d54a49, []int{0}
}
func (m *Name) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Name) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Name.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Name) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Name.Merge(m, src)
}
func (m *Name) XXX_Size() int {
	return m.Size()
}
func (m *Name) XXX_DiscardUnknown() {
	xxx_messageInfo_Name.DiscardUnknown(m)
}

var xxx_messageInfo_Name proto.InternalMessageInfo

func (m *Name) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Name) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *Name) GetPrice() string {
	if m != nil {
		return m.Price
	}
	return ""
}

func (m *Name) GetAuthorized() string {
	if m != nil {
		return m.Authorized
	}
	return ""
}

func (m *Name) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Name) GetExpirationHeight() uint64 {
	if m != nil {
		return m.ExpirationHeight
	}
	return 0
}

func (m *Name) GetRegistrationHeight() uint64 {
	if m != nil {
		return m.RegistrationHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Name)(nil), "names.Name")
}

func init() { proto.RegisterFile("names/name.proto", fileDescriptor_a1cfc2bb23d54a49) }

var fileDescriptor_a1cfc2bb23d54a49 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x31, 0x4f, 0xfb, 0x30,
	0x10, 0xc5, 0xeb, 0xff, 0xbf, 0x41, 0xe0, 0x32, 0x14, 0xd3, 0xc1, 0xea, 0x60, 0xa2, 0x4e, 0x95,
	0x90, 0xea, 0x81, 0x95, 0x89, 0x89, 0x89, 0xa1, 0x23, 0x0b, 0x4a, 0x9a, 0xc3, 0xb1, 0x44, 0x72,
	0x91, 0xed, 0x88, 0x96, 0x4f, 0xc1, 0xc7, 0x62, 0xec, 0xc8, 0x88, 0x12, 0x89, 0xcf, 0x81, 0x72,
	0x1e, 0x08, 0xcb, 0xe9, 0xde, 0xfb, 0xbd, 0x77, 0xc3, 0xf1, 0x79, 0x9d, 0x55, 0xe0, 0xf5, 0x30,
	0x37, 0x8d, 0xc3, 0x80, 0x22, 0x21, 0x67, 0xb9, 0x30, 0x68, 0x90, 0x1c, 0x3d, 0x6c, 0x11, 0x2e,
	0xaf, 0x0c, 0xa2, 0x79, 0x01, 0x4d, 0x2a, 0x6f, 0x9f, 0x75, 0xb0, 0x15, 0xf8, 0x90, 0x55, 0x4d,
	0x0c, 0xac, 0xbe, 0x19, 0x9f, 0x3e, 0x64, 0x15, 0x08, 0xc1, 0xa7, 0xc3, 0x21, 0xc9, 0x52, 0xb6,
	0x3e, 0xdb, 0xd2, 0x2e, 0x52, 0x3e, 0x2b, 0xc0, 0x07, 0x5b, 0x67, 0xc1, 0x62, 0x2d, 0xff, 0x11,
	0x1a, 0x5b, 0x62, 0xc1, 0x93, 0xc6, 0xd9, 0x1d, 0xc8, 0xff, 0xc4, 0xa2, 0x10, 0x8a, 0xf3, 0xac,
	0x0d, 0x25, 0x3a, 0xfb, 0x06, 0x85, 0x4c, 0x08, 0x8d, 0x9c, 0xa1, 0x85, 0xaf, 0x35, 0x38, 0x79,
	0x1a, 0x5b, 0x24, 0xc4, 0x35, 0xbf, 0x80, 0x7d, 0x63, 0x1d, 0x5d, 0x7e, 0x2a, 0xc1, 0x9a, 0x32,
	0xc8, 0x59, 0xca, 0xd6, 0xd3, 0xed, 0xfc, 0x17, 0xdc, 0x93, 0x2f, 0x34, 0xbf, 0x74, 0x60, 0xac,
	0x0f, 0x7f, 0xe3, 0xe7, 0x14, 0x17, 0x63, 0x14, 0x0b, 0x77, 0xb7, 0x1f, 0x9d, 0x62, 0xc7, 0x4e,
	0xb1, 0xaf, 0x4e, 0xb1, 0xf7, 0x5e, 0x4d, 0x8e, 0xbd, 0x9a, 0x7c, 0xf6, 0x6a, 0xf2, 0xb8, 0x32,
	0x36, 0x94, 0x6d, 0xbe, 0xd9, 0x61, 0xa5, 0xd1, 0x19, 0x5d, 0x1c, 0x3c, 0xd6, 0x7a, 0xaf, 0xe3,
	0xa7, 0xc3, 0xa1, 0x01, 0x9f, 0x9f, 0xd0, 0xb7, 0x6e, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf6,
	0x4a, 0x53, 0x8e, 0x7f, 0x01, 0x00, 0x00,
}

func (m *Name) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Name) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Name) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegistrationHeight != 0 {
		i = encodeVarintName(dAtA, i, uint64(m.RegistrationHeight))
		i--
		dAtA[i] = 0x60
	}
	if m.ExpirationHeight != 0 {
		i = encodeVarintName(dAtA, i, uint64(m.ExpirationHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintName(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Authorized) > 0 {
		i -= len(m.Authorized)
		copy(dAtA[i:], m.Authorized)
		i = encodeVarintName(dAtA, i, uint64(len(m.Authorized)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Price) > 0 {
		i -= len(m.Price)
		copy(dAtA[i:], m.Price)
		i = encodeVarintName(dAtA, i, uint64(len(m.Price)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Destination) > 0 {
		i -= len(m.Destination)
		copy(dAtA[i:], m.Destination)
		i = encodeVarintName(dAtA, i, uint64(len(m.Destination)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintName(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintName(dAtA []byte, offset int, v uint64) int {
	offset -= sovName(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Name) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Price)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Authorized)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovName(uint64(l))
	}
	if m.ExpirationHeight != 0 {
		n += 1 + sovName(uint64(m.ExpirationHeight))
	}
	if m.RegistrationHeight != 0 {
		n += 1 + sovName(uint64(m.RegistrationHeight))
	}
	return n
}

func sovName(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozName(x uint64) (n int) {
	return sovName(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Name) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowName
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Name: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Name: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Price = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authorized", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authorized = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthName
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthName
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationHeight", wireType)
			}
			m.ExpirationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpirationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrationHeight", wireType)
			}
			m.RegistrationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowName
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegistrationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipName(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthName
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipName(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowName
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowName
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowName
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthName
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupName
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthName
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthName        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowName          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupName = fmt.Errorf("proto: unexpected end of group")
)
