// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dyson/msgrun.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRun runs a script at a specific address
type MsgRun struct {
	// The account sending this transaction
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// Dys address of the script to call
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Optional extra source code to append to the end of the script before running. Only available to the script address itself.
	ExtraLines string `protobuf:"bytes,3,opt,name=extra_lines,json=extraLines,proto3" json:"extra_lines,omitempty"`
	// Optional function to call
	FunctionName string `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// Optional args to call the function with
	Args string `protobuf:"bytes,5,opt,name=args,proto3" json:"args,omitempty"`
	// Optional kwargs to run
	Kwargs string `protobuf:"bytes,6,opt,name=kwargs,proto3" json:"kwargs,omitempty"`
	//Optional comma seperated list of coins to send the script (for example "123dys,456token") this entire amount will be sent to the script
	Coins string `protobuf:"bytes,7,opt,name=coins,proto3" json:"coins,omitempty"`
	// Optional NFTs to send the script, formatted [class_id]/[id], [class_id]/[id] (for example "example.dys/123, example.dys/456")
	Nfts string `protobuf:"bytes,9,opt,name=nfts,proto3" json:"nfts,omitempty"`
}

func (m *MsgRun) Reset()         { *m = MsgRun{} }
func (m *MsgRun) String() string { return proto.CompactTextString(m) }
func (*MsgRun) ProtoMessage()    {}
func (*MsgRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_381ebb8192d4686d, []int{0}
}
func (m *MsgRun) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRun.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRun.Merge(m, src)
}
func (m *MsgRun) XXX_Size() int {
	return m.Size()
}
func (m *MsgRun) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRun.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRun proto.InternalMessageInfo

func (m *MsgRun) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRun) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgRun) GetExtraLines() string {
	if m != nil {
		return m.ExtraLines
	}
	return ""
}

func (m *MsgRun) GetFunctionName() string {
	if m != nil {
		return m.FunctionName
	}
	return ""
}

func (m *MsgRun) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *MsgRun) GetKwargs() string {
	if m != nil {
		return m.Kwargs
	}
	return ""
}

func (m *MsgRun) GetCoins() string {
	if m != nil {
		return m.Coins
	}
	return ""
}

func (m *MsgRun) GetNfts() string {
	if m != nil {
		return m.Nfts
	}
	return ""
}

type MsgRunResponse struct {
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (m *MsgRunResponse) Reset()         { *m = MsgRunResponse{} }
func (m *MsgRunResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRunResponse) ProtoMessage()    {}
func (*MsgRunResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_381ebb8192d4686d, []int{1}
}
func (m *MsgRunResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRunResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRunResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRunResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRunResponse.Merge(m, src)
}
func (m *MsgRunResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRunResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRunResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRunResponse proto.InternalMessageInfo

func (m *MsgRunResponse) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func init() {
	proto.RegisterType((*MsgRun)(nil), "dyson.MsgRun")
	proto.RegisterType((*MsgRunResponse)(nil), "dyson.MsgRunResponse")
}

func init() { proto.RegisterFile("dyson/msgrun.proto", fileDescriptor_381ebb8192d4686d) }

var fileDescriptor_381ebb8192d4686d = []byte{
	// 282 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0xbd, 0x4e, 0xf3, 0x30,
	0x14, 0x86, 0xe3, 0xef, 0x6b, 0x52, 0x6a, 0x7e, 0x06, 0xab, 0x42, 0x56, 0x07, 0x83, 0xc2, 0xc2,
	0x80, 0x9a, 0x81, 0x95, 0x89, 0x19, 0x18, 0x32, 0xb2, 0x54, 0x6e, 0xe2, 0x9a, 0x08, 0x62, 0x47,
	0x3e, 0x8e, 0x68, 0xef, 0x82, 0xcb, 0x62, 0xec, 0xd8, 0x11, 0x25, 0x37, 0x82, 0x72, 0x9c, 0x32,
	0xf9, 0x7d, 0x9f, 0xc7, 0x3a, 0xd2, 0x39, 0x94, 0x95, 0x3b, 0xb0, 0x26, 0xab, 0x41, 0xbb, 0xd6,
	0x2c, 0x1b, 0x67, 0xbd, 0x65, 0x31, 0xb2, 0xc5, 0x5c, 0x5b, 0x6d, 0x91, 0x64, 0x43, 0x0a, 0x32,
	0x3d, 0x10, 0x9a, 0x3c, 0x83, 0xce, 0x5b, 0xc3, 0x38, 0x9d, 0x16, 0x4e, 0x49, 0x6f, 0x1d, 0x27,
	0xd7, 0xe4, 0x76, 0x96, 0x1f, 0xeb, 0x60, 0x64, 0x59, 0x3a, 0x05, 0xc0, 0xff, 0x05, 0x33, 0x56,
	0x76, 0x45, 0x4f, 0xd5, 0xd6, 0x3b, 0xb9, 0xfa, 0xa8, 0x8c, 0x02, 0xfe, 0x1f, 0x2d, 0x45, 0xf4,
	0x34, 0x10, 0x76, 0x43, 0xcf, 0x37, 0xad, 0x29, 0x7c, 0x65, 0xcd, 0xca, 0xc8, 0x5a, 0xf1, 0x09,
	0x7e, 0x39, 0x3b, 0xc2, 0x17, 0x59, 0x2b, 0xc6, 0xe8, 0x44, 0x3a, 0x0d, 0x3c, 0x46, 0x87, 0x99,
	0x5d, 0xd2, 0xe4, 0xfd, 0x13, 0x69, 0x82, 0x74, 0x6c, 0x6c, 0x4e, 0xe3, 0xc2, 0x56, 0x06, 0xf8,
	0x14, 0x71, 0x28, 0xc3, 0x04, 0xb3, 0xf1, 0xc0, 0x67, 0x61, 0xc2, 0x90, 0xd3, 0x3b, 0x7a, 0x11,
	0x36, 0xcb, 0x15, 0x34, 0xd6, 0x80, 0x62, 0x0b, 0x7a, 0xe2, 0xc6, 0x3c, 0xae, 0xf8, 0xd7, 0x1f,
	0x1f, 0xbe, 0x3b, 0x41, 0xf6, 0x9d, 0x20, 0x3f, 0x9d, 0x20, 0x5f, 0xbd, 0x88, 0xf6, 0xbd, 0x88,
	0x0e, 0xbd, 0x88, 0x5e, 0x53, 0x5d, 0xf9, 0xb7, 0x76, 0xbd, 0x2c, 0x6c, 0x9d, 0x59, 0xa7, 0xb3,
	0x70, 0xe2, 0xed, 0xf8, 0xfa, 0x5d, 0xa3, 0x60, 0x9d, 0xe0, 0x35, 0xef, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0x1b, 0x52, 0x99, 0x64, 0x80, 0x01, 0x00, 0x00,
}

func (m *MsgRun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRun) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRun) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nfts) > 0 {
		i -= len(m.Nfts)
		copy(dAtA[i:], m.Nfts)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.Nfts)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Coins) > 0 {
		i -= len(m.Coins)
		copy(dAtA[i:], m.Coins)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.Coins)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Kwargs) > 0 {
		i -= len(m.Kwargs)
		copy(dAtA[i:], m.Kwargs)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.Kwargs)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FunctionName) > 0 {
		i -= len(m.FunctionName)
		copy(dAtA[i:], m.FunctionName)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.FunctionName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ExtraLines) > 0 {
		i -= len(m.ExtraLines)
		copy(dAtA[i:], m.ExtraLines)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.ExtraLines)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRunResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRunResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRunResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Response) > 0 {
		i -= len(m.Response)
		copy(dAtA[i:], m.Response)
		i = encodeVarintMsgrun(dAtA, i, uint64(len(m.Response)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMsgrun(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgrun(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRun) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	l = len(m.ExtraLines)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	l = len(m.FunctionName)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	l = len(m.Kwargs)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	l = len(m.Coins)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	l = len(m.Nfts)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	return n
}

func (m *MsgRunResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Response)
	if l > 0 {
		n += 1 + l + sovMsgrun(uint64(l))
	}
	return n
}

func sovMsgrun(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgrun(x uint64) (n int) {
	return sovMsgrun(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgrun
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraLines", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraLines = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FunctionName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FunctionName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kwargs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kwargs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nfts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nfts = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgrun(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgrun
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRunResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgrun
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRunResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRunResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Response = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgrun(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgrun
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgrun(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgrun
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgrun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgrun
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgrun
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgrun
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgrun        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgrun          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgrun = fmt.Errorf("proto: unexpected end of group")
)
