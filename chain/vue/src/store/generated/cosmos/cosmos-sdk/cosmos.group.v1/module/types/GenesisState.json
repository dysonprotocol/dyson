{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/GenesisState",
    "definitions": {
        "GenesisState": {
            "properties": {
                "group_seq": {
                    "type": "string",
                    "description": "group_seq is the group table orm.Sequence, it is used to get the next group ID."
                },
                "groups": {
                    "items": {
                        "$ref": "#/definitions/cosmos.group.v1.GroupInfo"
                    },
                    "type": "array",
                    "description": "groups is the list of groups info."
                },
                "group_members": {
                    "items": {
                        "$ref": "#/definitions/cosmos.group.v1.GroupMember"
                    },
                    "type": "array",
                    "description": "group_members is the list of groups members."
                },
                "group_policy_seq": {
                    "type": "string",
                    "description": "group_policy_seq is the group policy table orm.Sequence, it is used to generate the next group policy account address."
                },
                "group_policies": {
                    "items": {
                        "$ref": "#/definitions/cosmos.group.v1.GroupPolicyInfo"
                    },
                    "type": "array",
                    "description": "group_policies is the list of group policies info."
                },
                "proposal_seq": {
                    "type": "string",
                    "description": "proposal_seq is the proposal table orm.Sequence, it is used to get the next proposal ID."
                },
                "proposals": {
                    "items": {
                        "$ref": "#/definitions/cosmos.group.v1.Proposal"
                    },
                    "type": "array",
                    "description": "proposals is the list of proposals."
                },
                "votes": {
                    "items": {
                        "$ref": "#/definitions/cosmos.group.v1.Vote"
                    },
                    "type": "array",
                    "description": "votes is the list of votes."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Genesis State",
            "description": "GenesisState defines the group module's genesis state."
        },
        "cosmos.group.v1.GroupInfo": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "id is the unique ID of the group."
                },
                "admin": {
                    "type": "string",
                    "description": "admin is the account address of the group's admin."
                },
                "metadata": {
                    "type": "string",
                    "description": "metadata is any arbitrary metadata to attached to the group."
                },
                "version": {
                    "type": "string",
                    "description": "version is used to track changes to a group's membership structure that would break existing proposals. Whenever any members weight is changed, or any member is added or removed this version is incremented and will cause proposals based on older versions of this group to fail"
                },
                "total_weight": {
                    "type": "string",
                    "description": "total_weight is the sum of the group members' weights."
                },
                "created_at": {
                    "type": "string",
                    "description": "created_at is a timestamp specifying when a group was created.",
                    "format": "date-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "State",
            "description": "State  GroupInfo represents the high-level on-chain information for a group."
        },
        "cosmos.group.v1.GroupMember": {
            "properties": {
                "group_id": {
                    "type": "string",
                    "description": "group_id is the unique ID of the group."
                },
                "member": {
                    "$ref": "#/definitions/cosmos.group.v1.Member",
                    "additionalProperties": true,
                    "description": "member is the member data."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Group Member",
            "description": "GroupMember represents the relationship between a group and a member."
        },
        "cosmos.group.v1.GroupPolicyInfo": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "address is the account address of group policy."
                },
                "group_id": {
                    "type": "string",
                    "description": "group_id is the unique ID of the group."
                },
                "admin": {
                    "type": "string",
                    "description": "admin is the account address of the group admin."
                },
                "metadata": {
                    "type": "string",
                    "description": "metadata is any arbitrary metadata to attached to the group policy."
                },
                "version": {
                    "type": "string",
                    "description": "version is used to track changes to a group's GroupPolicyInfo structure that would create a different result on a running proposal."
                },
                "decision_policy": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "decision_policy specifies the group policy's decision policy."
                },
                "created_at": {
                    "type": "string",
                    "description": "created_at is a timestamp specifying when a group policy was created.",
                    "format": "date-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Group Policy Info",
            "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
        },
        "cosmos.group.v1.Member": {
            "properties": {
                "address": {
                    "type": "string",
                    "description": "address is the member's account address."
                },
                "weight": {
                    "type": "string",
                    "description": "weight is the member's voting weight that should be greater than 0."
                },
                "metadata": {
                    "type": "string",
                    "description": "metadata is any arbitrary metadata attached to the member."
                },
                "added_at": {
                    "type": "string",
                    "description": "added_at is a timestamp specifying when a member was added.",
                    "format": "date-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Member",
            "description": "Member represents a group member with an account address, non-zero weight, metadata and added_at timestamp."
        },
        "cosmos.group.v1.Proposal": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "id is the unique id of the proposal."
                },
                "group_policy_address": {
                    "type": "string",
                    "description": "group_policy_address is the account address of group policy."
                },
                "metadata": {
                    "type": "string",
                    "description": "metadata is any arbitrary metadata to attached to the proposal."
                },
                "proposers": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "proposers are the account addresses of the proposers."
                },
                "submit_time": {
                    "type": "string",
                    "description": "submit_time is a timestamp specifying when a proposal was submitted.",
                    "format": "date-time"
                },
                "group_version": {
                    "type": "string",
                    "description": "group_version tracks the version of the group at proposal submission. This field is here for informational purposes only."
                },
                "group_policy_version": {
                    "type": "string",
                    "description": "group_policy_version tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only."
                },
                "status": {
                    "enum": [
                        "PROPOSAL_STATUS_UNSPECIFIED",
                        0,
                        "PROPOSAL_STATUS_SUBMITTED",
                        1,
                        "PROPOSAL_STATUS_ACCEPTED",
                        2,
                        "PROPOSAL_STATUS_REJECTED",
                        3,
                        "PROPOSAL_STATUS_ABORTED",
                        4,
                        "PROPOSAL_STATUS_WITHDRAWN",
                        5
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Proposal Status",
                    "description": "ProposalStatus defines proposal statuses."
                },
                "final_tally_result": {
                    "$ref": "#/definitions/cosmos.group.v1.TallyResult",
                    "additionalProperties": true,
                    "description": "final_tally_result contains the sums of all weighted votes for this proposal for each vote option. It is empty at submission, and only populated after tallying, at voting period end or at proposal execution, whichever happens first."
                },
                "voting_period_end": {
                    "type": "string",
                    "description": "voting_period_end is the timestamp before which voting must be done. Unless a successfull MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.",
                    "format": "date-time"
                },
                "executor_result": {
                    "enum": [
                        "PROPOSAL_EXECUTOR_RESULT_UNSPECIFIED",
                        0,
                        "PROPOSAL_EXECUTOR_RESULT_NOT_RUN",
                        1,
                        "PROPOSAL_EXECUTOR_RESULT_SUCCESS",
                        2,
                        "PROPOSAL_EXECUTOR_RESULT_FAILURE",
                        3
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Proposal Executor Result",
                    "description": "ProposalExecutorResult defines types of proposal executor results."
                },
                "messages": {
                    "items": {
                        "properties": {
                            "type_url": {
                                "type": "string",
                                "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                            },
                            "value": {
                                "type": "string",
                                "description": "Must be a valid serialized protocol buffer of the above specified type.",
                                "format": "binary",
                                "binaryEncoding": "base64"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "title": "Any",
                        "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++.     Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(\u0026foo)) {       ...     } Example 2: Pack and unpack a message in Java.     Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.     foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go      foo := \u0026pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := \u0026pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:     package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }     {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": \u003cstring\u003e,       \"lastName\": \u003cstring\u003e     } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):     {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }"
                    },
                    "type": "array",
                    "description": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Proposal",
            "description": "Proposal defines a group proposal. Any member of a group can submit a proposal for a group policy to decide upon. A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal passes as well as some optional metadata associated with the proposal."
        },
        "cosmos.group.v1.TallyResult": {
            "properties": {
                "yes_count": {
                    "type": "string",
                    "description": "yes_count is the weighted sum of yes votes."
                },
                "abstain_count": {
                    "type": "string",
                    "description": "abstain_count is the weighted sum of abstainers."
                },
                "no_count": {
                    "type": "string",
                    "description": "no_count is the weighted sum of no votes."
                },
                "no_with_veto_count": {
                    "type": "string",
                    "description": "no_with_veto_count is the weighted sum of veto."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Tally Result",
            "description": "TallyResult represents the sum of weighted votes for each vote option."
        },
        "cosmos.group.v1.Vote": {
            "properties": {
                "proposal_id": {
                    "type": "string",
                    "description": "proposal is the unique ID of the proposal."
                },
                "voter": {
                    "type": "string",
                    "description": "voter is the account address of the voter."
                },
                "option": {
                    "enum": [
                        "VOTE_OPTION_UNSPECIFIED",
                        0,
                        "VOTE_OPTION_YES",
                        1,
                        "VOTE_OPTION_ABSTAIN",
                        2,
                        "VOTE_OPTION_NO",
                        3,
                        "VOTE_OPTION_NO_WITH_VETO",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "title": "Vote Option",
                    "description": "VoteOption enumerates the valid vote options for a given proposal."
                },
                "metadata": {
                    "type": "string",
                    "description": "metadata is any arbitrary metadata to attached to the vote."
                },
                "submit_time": {
                    "type": "string",
                    "description": "submit_time is the timestamp when the vote was submitted.",
                    "format": "date-time"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Vote",
            "description": "Vote represents a vote for a proposal."
        }
    }
}