{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "$ref": "#/definitions/GenesisState",
    "definitions": {
        "GenesisState": {
            "properties": {
                "clients": {
                    "items": {
                        "$ref": "#/definitions/ibc.core.client.v1.IdentifiedClientState"
                    },
                    "type": "array",
                    "description": "client states with their corresponding identifiers"
                },
                "clients_consensus": {
                    "items": {
                        "$ref": "#/definitions/ibc.core.client.v1.ClientConsensusStates"
                    },
                    "type": "array",
                    "description": "consensus states from each client"
                },
                "clients_metadata": {
                    "items": {
                        "$ref": "#/definitions/ibc.core.client.v1.IdentifiedGenesisMetadata"
                    },
                    "type": "array",
                    "description": "metadata from each client"
                },
                "params": {
                    "$ref": "#/definitions/ibc.core.client.v1.Params",
                    "additionalProperties": true
                },
                "create_localhost": {
                    "type": "boolean",
                    "description": "create localhost on initialization"
                },
                "next_client_sequence": {
                    "type": "string",
                    "description": "the sequence for the next generated client identifier"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Genesis State",
            "description": "GenesisState defines the ibc client submodule's genesis state."
        },
        "ibc.core.client.v1.ClientConsensusStates": {
            "properties": {
                "client_id": {
                    "type": "string",
                    "description": "client identifier"
                },
                "consensus_states": {
                    "items": {
                        "$ref": "#/definitions/ibc.core.client.v1.ConsensusStateWithHeight"
                    },
                    "type": "array",
                    "description": "consensus states and their heights associated with the client"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Client Consensus States",
            "description": "ClientConsensusStates defines all the stored consensus states for a given client."
        },
        "ibc.core.client.v1.ConsensusStateWithHeight": {
            "properties": {
                "height": {
                    "$ref": "#/definitions/ibc.core.client.v1.Height",
                    "additionalProperties": true,
                    "description": "consensus state height"
                },
                "consensus_state": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "consensus state"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Consensus State With Height",
            "description": "ConsensusStateWithHeight defines a consensus state with an additional height field."
        },
        "ibc.core.client.v1.GenesisMetadata": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "store key of metadata without clientID-prefix",
                    "format": "binary",
                    "binaryEncoding": "base64"
                },
                "value": {
                    "type": "string",
                    "description": "metadata value",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Genesis Metadata",
            "description": "GenesisMetadata defines the genesis type for metadata that clients may return with ExportMetadata"
        },
        "ibc.core.client.v1.Height": {
            "properties": {
                "revision_number": {
                    "type": "string",
                    "description": "the revision that the client is currently on"
                },
                "revision_height": {
                    "type": "string",
                    "description": "the height within the given revision"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Height",
            "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
        },
        "ibc.core.client.v1.IdentifiedClientState": {
            "properties": {
                "client_id": {
                    "type": "string",
                    "description": "client identifier"
                },
                "client_state": {
                    "properties": {
                        "type_url": {
                            "type": "string",
                            "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                        },
                        "value": {
                            "type": "string",
                            "description": "Must be a valid serialized protocol buffer of the above specified type.",
                            "format": "binary",
                            "binaryEncoding": "base64"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "client state"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Identified Client State",
            "description": "IdentifiedClientState defines a client state with an additional client identifier field."
        },
        "ibc.core.client.v1.IdentifiedGenesisMetadata": {
            "properties": {
                "client_id": {
                    "type": "string"
                },
                "client_metadata": {
                    "items": {
                        "$ref": "#/definitions/ibc.core.client.v1.GenesisMetadata"
                    },
                    "type": "array"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Identified Genesis Metadata",
            "description": "IdentifiedGenesisMetadata has the client metadata with the corresponding client id."
        },
        "ibc.core.client.v1.Params": {
            "properties": {
                "allowed_clients": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "allowed_clients defines the list of allowed client state types."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "title": "Params",
            "description": "Params defines the set of IBC light client parameters."
        }
    }
}