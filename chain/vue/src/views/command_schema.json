{
  "cosmos.authz.v1beta1/QueryGrants": {
    "module_name": "cosmos.authz.v1beta1",
    "name": "Grants",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGrantsRequest",
      "definitions": {
        "QueryGrantsRequest": {
          "properties": {
            "granter": {
              "type": "string"
            },
            "grantee": {
              "type": "string"
            },
            "msg_type_url": {
              "type": "string",
              "description": "Optional, msg_type_url, when set, will query only grants matching given msg type."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Grants Request",
          "description": "QueryGrantsRequest is the request type for the Query/Grants RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGrantsResponse",
      "definitions": {
        "QueryGrantsResponse": {
          "properties": {
            "grants": {
              "items": {
                "$ref": "#/definitions/cosmos.authz.v1beta1.Grant"
              },
              "type": "array",
              "description": "authorizations is a list of grants granted for grantee by granter."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines an pagination for the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Grants Response",
          "description": "QueryGrantsResponse is the response type for the Query/Authorizations RPC method."
        },
        "cosmos.authz.v1beta1.Grant": {
          "properties": {
            "authorization": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object"
            },
            "expiration": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Grant",
          "description": "Grant gives permissions to execute the provide method with expiration time."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.authz.v1beta1/sendMsgGrant": {
    "module_name": "cosmos.authz.v1beta1",
    "name": "Grant",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgGrant",
      "definitions": {
        "MsgGrant": {
          "properties": {
            "granter": {
              "type": "string"
            },
            "grantee": {
              "type": "string"
            },
            "grant": {
              "$ref": "#/definitions/cosmos.authz.v1beta1.Grant",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Grant",
          "description": "MsgGrant is a request type for Grant method. It declares authorization to the grantee on behalf of the granter with the provided expiration time."
        },
        "cosmos.authz.v1beta1.Grant": {
          "properties": {
            "authorization": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object"
            },
            "expiration": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Grant",
          "description": "Grant gives permissions to execute the provide method with expiration time."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgGrantResponse",
      "definitions": {
        "MsgGrantResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Grant Response",
          "description": "MsgGrantResponse defines the Msg/MsgGrant response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.authz.v1beta1/sendMsgExec": {
    "module_name": "cosmos.authz.v1beta1",
    "name": "Exec",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgExec",
      "definitions": {
        "MsgExec": {
          "properties": {
            "grantee": {
              "type": "string"
            },
            "msgs": {
              "items": {
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                  },
                  "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                  }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "Any",
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++.     Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     } Example 2: Pack and unpack a message in Java.     Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.     foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go      foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:     package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }     {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):     {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }"
              },
              "type": "array",
              "description": "Authorization Msg requests to execute. Each msg must implement Authorization interface The x/authz will try to find a grant matching (msg.signers[0], grantee, MsgTypeURL(msg)) triple and validate it."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Exec",
          "description": "MsgExec attempts to execute the provided messages using authorizations granted to the grantee. Each message should have only one signer corresponding to the granter of the authorization."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgExecResponse",
      "definitions": {
        "MsgExecResponse": {
          "properties": {
            "results": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Exec Response",
          "description": "MsgExecResponse defines the Msg/MsgExecResponse response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.authz.v1beta1/sendMsgRevoke": {
    "module_name": "cosmos.authz.v1beta1",
    "name": "Revoke",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRevoke",
      "definitions": {
        "MsgRevoke": {
          "properties": {
            "granter": {
              "type": "string"
            },
            "grantee": {
              "type": "string"
            },
            "msg_type_url": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Revoke",
          "description": "MsgRevoke revokes any authorization with the provided sdk.Msg type on the granter's account with that has been granted to the grantee."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRevokeResponse",
      "definitions": {
        "MsgRevokeResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Revoke Response",
          "description": "MsgRevokeResponse defines the Msg/MsgRevokeResponse response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.bank.v1beta1/QueryBalance": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "Balance",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryBalanceRequest",
      "definitions": {
        "QueryBalanceRequest": {
          "properties": {
            "address": {
              "type": "string",
              "description": "address is the address to query balances for."
            },
            "denom": {
              "type": "string",
              "description": "denom is the coin denom to query balances for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Balance Request",
          "description": "QueryBalanceRequest is the request type for the Query/Balance RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryBalanceResponse",
      "definitions": {
        "QueryBalanceResponse": {
          "properties": {
            "balance": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true,
              "description": "balance is the balance of the coin."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Balance Response",
          "description": "QueryBalanceResponse is the response type for the Query/Balance RPC method."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "address",
          "denom"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.bank.v1beta1/QueryAllBalances": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "AllBalances",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllBalancesRequest",
      "definitions": {
        "QueryAllBalancesRequest": {
          "properties": {
            "address": {
              "type": "string",
              "description": "address is the address to query balances for."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Balances Request",
          "description": "QueryBalanceRequest is the request type for the Query/AllBalances RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllBalancesResponse",
      "definitions": {
        "QueryAllBalancesResponse": {
          "properties": {
            "balances": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array",
              "description": "balances is the balances of all the coins."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Balances Response",
          "description": "QueryAllBalancesResponse is the response type for the Query/AllBalances RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "address"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.bank.v1beta1/QueryTotalSupply": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "TotalSupply",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryTotalSupplyRequest",
      "definitions": {
        "QueryTotalSupplyRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Total Supply Request",
          "description": "QueryTotalSupplyRequest is the request type for the Query/TotalSupply RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryTotalSupplyResponse",
      "definitions": {
        "QueryTotalSupplyResponse": {
          "properties": {
            "supply": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array",
              "description": "supply is the supply of the coins"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Total Supply Response",
          "description": "QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC method"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.bank.v1beta1/QuerySupplyOf": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "SupplyOf",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QuerySupplyOfRequest",
      "definitions": {
        "QuerySupplyOfRequest": {
          "properties": {
            "denom": {
              "type": "string",
              "description": "denom is the coin denom to query balances for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Supply Of Request",
          "description": "QuerySupplyOfRequest is the request type for the Query/SupplyOf RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QuerySupplyOfResponse",
      "definitions": {
        "QuerySupplyOfResponse": {
          "properties": {
            "amount": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true,
              "description": "amount is the supply of the coin."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Supply Of Response",
          "description": "QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "denom"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.bank.v1beta1/QueryParams": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "Params",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsRequest",
      "definitions": {
        "QueryParamsRequest": {
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Request",
          "description": "QueryParamsRequest defines the request type for querying x/bank parameters."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsResponse",
      "definitions": {
        "QueryParamsResponse": {
          "properties": {
            "params": {
              "$ref": "#/definitions/cosmos.bank.v1beta1.Params",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Response",
          "description": "QueryParamsResponse defines the response type for querying x/bank parameters."
        },
        "cosmos.bank.v1beta1.Params": {
          "properties": {
            "send_enabled": {
              "items": {
                "$ref": "#/definitions/cosmos.bank.v1beta1.SendEnabled"
              },
              "type": "array"
            },
            "default_send_enabled": {
              "type": "boolean"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Params",
          "description": "Params defines the parameters for the bank module."
        },
        "cosmos.bank.v1beta1.SendEnabled": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Send Enabled",
          "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is sendable)."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.bank.v1beta1/QueryDenomMetadata": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "DenomMetadata",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomMetadataRequest",
      "definitions": {
        "QueryDenomMetadataRequest": {
          "properties": {
            "denom": {
              "type": "string",
              "description": "denom is the coin denom to query the metadata for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denom Metadata Request",
          "description": "QueryDenomMetadataRequest is the request type for the Query/DenomMetadata RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomMetadataResponse",
      "definitions": {
        "QueryDenomMetadataResponse": {
          "properties": {
            "metadata": {
              "$ref": "#/definitions/cosmos.bank.v1beta1.Metadata",
              "additionalProperties": true,
              "description": "metadata describes and provides all the client information for the requested token."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denom Metadata Response",
          "description": "QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC method."
        },
        "cosmos.bank.v1beta1.DenomUnit": {
          "properties": {
            "denom": {
              "type": "string",
              "description": "denom represents the string name of the given denom unit (e.g uatom)."
            },
            "exponent": {
              "type": "integer",
              "description": "exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 1^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom)."
            },
            "aliases": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "aliases is a list of string aliases for the given denom"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Denom Unit",
          "description": "DenomUnit represents a struct that describes a given denomination unit of the basic token."
        },
        "cosmos.bank.v1beta1.Metadata": {
          "properties": {
            "description": {
              "type": "string"
            },
            "denom_units": {
              "items": {
                "$ref": "#/definitions/cosmos.bank.v1beta1.DenomUnit"
              },
              "type": "array",
              "description": "denom_units represents the list of DenomUnit's for a given coin"
            },
            "base": {
              "type": "string",
              "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
            },
            "display": {
              "type": "string",
              "description": "display indicates the suggested denom that should be displayed in clients."
            },
            "name": {
              "type": "string",
              "description": "name defines the name of the token (eg: Cosmos Atom)"
            },
            "symbol": {
              "type": "string",
              "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Metadata",
          "description": "Metadata represents a struct that describes a basic token."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "denom"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.bank.v1beta1/QueryDenomsMetadata": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "DenomsMetadata",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomsMetadataRequest",
      "definitions": {
        "QueryDenomsMetadataRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denoms Metadata Request",
          "description": "QueryDenomsMetadataRequest is the request type for the Query/DenomsMetadata RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomsMetadataResponse",
      "definitions": {
        "QueryDenomsMetadataResponse": {
          "properties": {
            "metadatas": {
              "items": {
                "$ref": "#/definitions/cosmos.bank.v1beta1.Metadata"
              },
              "type": "array",
              "description": "metadata provides the client information for all the registered tokens."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denoms Metadata Response",
          "description": "QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC method."
        },
        "cosmos.bank.v1beta1.DenomUnit": {
          "properties": {
            "denom": {
              "type": "string",
              "description": "denom represents the string name of the given denom unit (e.g uatom)."
            },
            "exponent": {
              "type": "integer",
              "description": "exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 1^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom)."
            },
            "aliases": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "aliases is a list of string aliases for the given denom"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Denom Unit",
          "description": "DenomUnit represents a struct that describes a given denomination unit of the basic token."
        },
        "cosmos.bank.v1beta1.Metadata": {
          "properties": {
            "description": {
              "type": "string"
            },
            "denom_units": {
              "items": {
                "$ref": "#/definitions/cosmos.bank.v1beta1.DenomUnit"
              },
              "type": "array",
              "description": "denom_units represents the list of DenomUnit's for a given coin"
            },
            "base": {
              "type": "string",
              "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
            },
            "display": {
              "type": "string",
              "description": "display indicates the suggested denom that should be displayed in clients."
            },
            "name": {
              "type": "string",
              "description": "name defines the name of the token (eg: Cosmos Atom)"
            },
            "symbol": {
              "type": "string",
              "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Metadata",
          "description": "Metadata represents a struct that describes a basic token."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.bank.v1beta1/sendMsgSend": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "Send",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSend",
      "definitions": {
        "MsgSend": {
          "properties": {
            "from_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "amount": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Send",
          "description": "MsgSend represents a message to send coins from one account to another."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSendResponse",
      "definitions": {
        "MsgSendResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Send Response",
          "description": "MsgSendResponse defines the Msg/Send response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.bank.v1beta1/sendMsgMultiSend": {
    "module_name": "cosmos.bank.v1beta1",
    "name": "MultiSend",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgMultiSend",
      "definitions": {
        "MsgMultiSend": {
          "properties": {
            "inputs": {
              "items": {
                "$ref": "#/definitions/cosmos.bank.v1beta1.Input"
              },
              "type": "array"
            },
            "outputs": {
              "items": {
                "$ref": "#/definitions/cosmos.bank.v1beta1.Output"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Multi Send",
          "description": "MsgMultiSend represents an arbitrary multi-in, multi-out send message."
        },
        "cosmos.bank.v1beta1.Input": {
          "properties": {
            "address": {
              "type": "string"
            },
            "coins": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Input",
          "description": "Input models transaction input."
        },
        "cosmos.bank.v1beta1.Output": {
          "properties": {
            "address": {
              "type": "string"
            },
            "coins": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Output",
          "description": "Output models transaction outputs."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgMultiSendResponse",
      "definitions": {
        "MsgMultiSendResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Multi Send Response",
          "description": "MsgMultiSendResponse defines the Msg/MultiSend response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.distribution.v1beta1/QueryParams": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "Params",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsRequest",
      "definitions": {
        "QueryParamsRequest": {
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Request",
          "description": "QueryParamsRequest is the request type for the Query/Params RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsResponse",
      "definitions": {
        "QueryParamsResponse": {
          "properties": {
            "params": {
              "$ref": "#/definitions/cosmos.distribution.v1beta1.Params",
              "additionalProperties": true,
              "description": "params defines the parameters of the module."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Response",
          "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
        },
        "cosmos.distribution.v1beta1.Params": {
          "properties": {
            "community_tax": {
              "type": "string"
            },
            "base_proposer_reward": {
              "type": "string"
            },
            "bonus_proposer_reward": {
              "type": "string"
            },
            "withdraw_addr_enabled": {
              "type": "boolean"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Params",
          "description": "Params defines the set of params for the distribution module."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryValidatorOutstandingRewards": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "ValidatorOutstandingRewards",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorOutstandingRewardsRequest",
      "definitions": {
        "QueryValidatorOutstandingRewardsRequest": {
          "properties": {
            "validator_address": {
              "type": "string",
              "description": "validator_address defines the validator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Outstanding Rewards Request",
          "description": "QueryValidatorOutstandingRewardsRequest is the request type for the Query/ValidatorOutstandingRewards RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorOutstandingRewardsResponse",
      "definitions": {
        "QueryValidatorOutstandingRewardsResponse": {
          "properties": {
            "rewards": {
              "$ref": "#/definitions/cosmos.distribution.v1beta1.ValidatorOutstandingRewards",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Outstanding Rewards Response",
          "description": "QueryValidatorOutstandingRewardsResponse is the response type for the Query/ValidatorOutstandingRewards RPC method."
        },
        "cosmos.base.v1beta1.DecCoin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Dec Coin",
          "description": "DecCoin defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto."
        },
        "cosmos.distribution.v1beta1.ValidatorOutstandingRewards": {
          "properties": {
            "rewards": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.DecCoin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator Outstanding Rewards",
          "description": "ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_address"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryValidatorCommission": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "ValidatorCommission",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorCommissionRequest",
      "definitions": {
        "QueryValidatorCommissionRequest": {
          "properties": {
            "validator_address": {
              "type": "string",
              "description": "validator_address defines the validator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Commission Request",
          "description": "QueryValidatorCommissionRequest is the request type for the Query/ValidatorCommission RPC method"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorCommissionResponse",
      "definitions": {
        "QueryValidatorCommissionResponse": {
          "properties": {
            "commission": {
              "$ref": "#/definitions/cosmos.distribution.v1beta1.ValidatorAccumulatedCommission",
              "additionalProperties": true,
              "description": "commission defines the commision the validator received."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Commission Response",
          "description": "QueryValidatorCommissionResponse is the response type for the Query/ValidatorCommission RPC method"
        },
        "cosmos.base.v1beta1.DecCoin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Dec Coin",
          "description": "DecCoin defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto."
        },
        "cosmos.distribution.v1beta1.ValidatorAccumulatedCommission": {
          "properties": {
            "commission": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.DecCoin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator Accumulated Commission",
          "description": "ValidatorAccumulatedCommission represents accumulated commission for a validator kept as a running counter, can be withdrawn at any time."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_address"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryValidatorSlashes": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "ValidatorSlashes",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorSlashesRequest",
      "definitions": {
        "QueryValidatorSlashesRequest": {
          "properties": {
            "validator_address": {
              "type": "string",
              "description": "validator_address defines the validator address to query for."
            },
            "starting_height": {
              "type": "string",
              "description": "starting_height defines the optional starting height to query the slashes."
            },
            "ending_height": {
              "type": "string",
              "description": "starting_height defines the optional ending height to query the slashes."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Slashes Request",
          "description": "QueryValidatorSlashesRequest is the request type for the Query/ValidatorSlashes RPC method"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorSlashesResponse",
      "definitions": {
        "QueryValidatorSlashesResponse": {
          "properties": {
            "slashes": {
              "items": {
                "$ref": "#/definitions/cosmos.distribution.v1beta1.ValidatorSlashEvent"
              },
              "type": "array",
              "description": "slashes defines the slashes the validator received."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Slashes Response",
          "description": "QueryValidatorSlashesResponse is the response type for the Query/ValidatorSlashes RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.distribution.v1beta1.ValidatorSlashEvent": {
          "properties": {
            "validator_period": {
              "type": "string"
            },
            "fraction": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator Slash Event",
          "description": "ValidatorSlashEvent represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_address"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryDelegationRewards": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "DelegationRewards",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegationRewardsRequest",
      "definitions": {
        "QueryDelegationRewardsRequest": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address defines the delegator address to query for."
            },
            "validator_address": {
              "type": "string",
              "description": "validator_address defines the validator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegation Rewards Request",
          "description": "QueryDelegationRewardsRequest is the request type for the Query/DelegationRewards RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegationRewardsResponse",
      "definitions": {
        "QueryDelegationRewardsResponse": {
          "properties": {
            "rewards": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.DecCoin"
              },
              "type": "array",
              "description": "rewards defines the rewards accrued by a delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegation Rewards Response",
          "description": "QueryDelegationRewardsResponse is the response type for the Query/DelegationRewards RPC method."
        },
        "cosmos.base.v1beta1.DecCoin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Dec Coin",
          "description": "DecCoin defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_address",
          "validator_address"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryDelegationTotalRewards": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "DelegationTotalRewards",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegationTotalRewardsRequest",
      "definitions": {
        "QueryDelegationTotalRewardsRequest": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address defines the delegator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegation Total Rewards Request",
          "description": "QueryDelegationTotalRewardsRequest is the request type for the Query/DelegationTotalRewards RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegationTotalRewardsResponse",
      "definitions": {
        "QueryDelegationTotalRewardsResponse": {
          "properties": {
            "rewards": {
              "items": {
                "$ref": "#/definitions/cosmos.distribution.v1beta1.DelegationDelegatorReward"
              },
              "type": "array",
              "description": "rewards defines all the rewards accrued by a delegator."
            },
            "total": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.DecCoin"
              },
              "type": "array",
              "description": "total defines the sum of all the rewards."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegation Total Rewards Response",
          "description": "QueryDelegationTotalRewardsResponse is the response type for the Query/DelegationTotalRewards RPC method."
        },
        "cosmos.base.v1beta1.DecCoin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Dec Coin",
          "description": "DecCoin defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto."
        },
        "cosmos.distribution.v1beta1.DelegationDelegatorReward": {
          "properties": {
            "validator_address": {
              "type": "string"
            },
            "reward": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.DecCoin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Delegation Delegator Reward",
          "description": "DelegationDelegatorReward represents the properties of a delegator's delegation reward."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_address"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryDelegatorValidators": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "DelegatorValidators",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorValidatorsRequest",
      "definitions": {
        "QueryDelegatorValidatorsRequest": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address defines the delegator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Validators Request",
          "description": "QueryDelegatorValidatorsRequest is the request type for the Query/DelegatorValidators RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorValidatorsResponse",
      "definitions": {
        "QueryDelegatorValidatorsResponse": {
          "properties": {
            "validators": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "description": "validators defines the validators a delegator is delegating for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Validators Response",
          "description": "QueryDelegatorValidatorsResponse is the response type for the Query/DelegatorValidators RPC method."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_address"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryDelegatorWithdrawAddress": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "DelegatorWithdrawAddress",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorWithdrawAddressRequest",
      "definitions": {
        "QueryDelegatorWithdrawAddressRequest": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address defines the delegator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Withdraw Address Request",
          "description": "QueryDelegatorWithdrawAddressRequest is the request type for the Query/DelegatorWithdrawAddress RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorWithdrawAddressResponse",
      "definitions": {
        "QueryDelegatorWithdrawAddressResponse": {
          "properties": {
            "withdraw_address": {
              "type": "string",
              "description": "withdraw_address defines the delegator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Withdraw Address Response",
          "description": "QueryDelegatorWithdrawAddressResponse is the response type for the Query/DelegatorWithdrawAddress RPC method."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_address"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/QueryCommunityPool": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "CommunityPool",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryCommunityPoolRequest",
      "definitions": {
        "QueryCommunityPoolRequest": {
          "additionalProperties": true,
          "type": "object",
          "title": "Query Community Pool Request",
          "description": "QueryCommunityPoolRequest is the request type for the Query/CommunityPool RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryCommunityPoolResponse",
      "definitions": {
        "QueryCommunityPoolResponse": {
          "properties": {
            "pool": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.DecCoin"
              },
              "type": "array",
              "description": "pool defines community pool's coins."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Community Pool Response",
          "description": "QueryCommunityPoolResponse is the response type for the Query/CommunityPool RPC method."
        },
        "cosmos.base.v1beta1.DecCoin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Dec Coin",
          "description": "DecCoin defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.distribution.v1beta1/sendMsgSetWithdrawAddress": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "SetWithdrawAddress",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSetWithdrawAddress",
      "definitions": {
        "MsgSetWithdrawAddress": {
          "properties": {
            "delegator_address": {
              "type": "string"
            },
            "withdraw_address": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Set Withdraw Address",
          "description": "MsgSetWithdrawAddress sets the withdraw address for a delegator (or validator self-delegation)."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSetWithdrawAddressResponse",
      "definitions": {
        "MsgSetWithdrawAddressResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Set Withdraw Address Response",
          "description": "MsgSetWithdrawAddressResponse defines the Msg/SetWithdrawAddress response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.distribution.v1beta1/sendMsgWithdrawDelegatorReward": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "WithdrawDelegatorReward",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgWithdrawDelegatorReward",
      "definitions": {
        "MsgWithdrawDelegatorReward": {
          "properties": {
            "delegator_address": {
              "type": "string"
            },
            "validator_address": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Withdraw Delegator Reward",
          "description": "MsgWithdrawDelegatorReward represents delegation withdrawal to a delegator from a single validator."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgWithdrawDelegatorRewardResponse",
      "definitions": {
        "MsgWithdrawDelegatorRewardResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Withdraw Delegator Reward Response",
          "description": "MsgWithdrawDelegatorRewardResponse defines the Msg/WithdrawDelegatorReward response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.distribution.v1beta1/sendMsgWithdrawValidatorCommission": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "WithdrawValidatorCommission",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgWithdrawValidatorCommission",
      "definitions": {
        "MsgWithdrawValidatorCommission": {
          "properties": {
            "validator_address": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Withdraw Validator Commission",
          "description": "MsgWithdrawValidatorCommission withdraws the full commission to the validator address."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgWithdrawValidatorCommissionResponse",
      "definitions": {
        "MsgWithdrawValidatorCommissionResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Withdraw Validator Commission Response",
          "description": "MsgWithdrawValidatorCommissionResponse defines the Msg/WithdrawValidatorCommission response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.distribution.v1beta1/sendMsgFundCommunityPool": {
    "module_name": "cosmos.distribution.v1beta1",
    "name": "FundCommunityPool",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgFundCommunityPool",
      "definitions": {
        "MsgFundCommunityPool": {
          "properties": {
            "amount": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            },
            "depositor": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Fund Community Pool",
          "description": "MsgFundCommunityPool allows an account to directly fund the community pool."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgFundCommunityPoolResponse",
      "definitions": {
        "MsgFundCommunityPoolResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Fund Community Pool Response",
          "description": "MsgFundCommunityPoolResponse defines the Msg/FundCommunityPool response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.evidence.v1beta1/QueryEvidence": {
    "module_name": "cosmos.evidence.v1beta1",
    "name": "Evidence",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryEvidenceRequest",
      "definitions": {
        "QueryEvidenceRequest": {
          "properties": {
            "evidence_hash": {
              "type": "string",
              "description": "evidence_hash defines the hash of the requested evidence.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Evidence Request",
          "description": "QueryEvidenceRequest is the request type for the Query/Evidence RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryEvidenceResponse",
      "definitions": {
        "QueryEvidenceResponse": {
          "properties": {
            "evidence": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "evidence returns the requested evidence."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Evidence Response",
          "description": "QueryEvidenceResponse is the response type for the Query/Evidence RPC method."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "evidence_hash"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.evidence.v1beta1/QueryAllEvidence": {
    "module_name": "cosmos.evidence.v1beta1",
    "name": "AllEvidence",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllEvidenceRequest",
      "definitions": {
        "QueryAllEvidenceRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Evidence Request",
          "description": "QueryEvidenceRequest is the request type for the Query/AllEvidence RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllEvidenceResponse",
      "definitions": {
        "QueryAllEvidenceResponse": {
          "properties": {
            "evidence": {
              "items": {
                "properties": {
                  "type_url": {
                    "type": "string",
                    "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                  },
                  "value": {
                    "type": "string",
                    "description": "Must be a valid serialized protocol buffer of the above specified type.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                  }
                },
                "additionalProperties": true,
                "type": "object",
                "title": "Any",
                "description": "`Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message. Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type. Example 1: Pack and unpack a message in C++.     Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     } Example 2: Pack and unpack a message in Java.     Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  Example 3: Pack and unpack a message in Python.     foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  Example 4: Pack and unpack a message in Go      foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      } The pack methods provided by protobuf library will by default use 'type.googleapis.com/full.type.name' as the type URL and the unpack methods only use the fully qualified type name after the last '/' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\". JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:     package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }     {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     } If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):     {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }"
              },
              "type": "array",
              "description": "evidence returns all evidences."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Evidence Response",
          "description": "QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.evidence.v1beta1/sendMsgSubmitEvidence": {
    "module_name": "cosmos.evidence.v1beta1",
    "name": "SubmitEvidence",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSubmitEvidence",
      "definitions": {
        "MsgSubmitEvidence": {
          "properties": {
            "submitter": {
              "type": "string"
            },
            "evidence": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Submit Evidence",
          "description": "MsgSubmitEvidence represents a message that supports submitting arbitrary Evidence of misbehavior such as equivocation or counterfactual signing."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSubmitEvidenceResponse",
      "definitions": {
        "MsgSubmitEvidenceResponse": {
          "properties": {
            "hash": {
              "type": "string",
              "description": "hash defines the hash of the evidence.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Submit Evidence Response",
          "description": "MsgSubmitEvidenceResponse defines the Msg/SubmitEvidence response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.feegrant.v1beta1/QueryAllowance": {
    "module_name": "cosmos.feegrant.v1beta1",
    "name": "Allowance",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllowanceRequest",
      "definitions": {
        "QueryAllowanceRequest": {
          "properties": {
            "granter": {
              "type": "string",
              "description": "granter is the address of the user granting an allowance of their funds."
            },
            "grantee": {
              "type": "string",
              "description": "grantee is the address of the user being granted an allowance of another user's funds."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Allowance Request",
          "description": "QueryAllowanceRequest is the request type for the Query/Allowance RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllowanceResponse",
      "definitions": {
        "QueryAllowanceResponse": {
          "properties": {
            "allowance": {
              "$ref": "#/definitions/cosmos.feegrant.v1beta1.Grant",
              "additionalProperties": true,
              "description": "allowance is a allowance granted for grantee by granter."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Allowance Response",
          "description": "QueryAllowanceResponse is the response type for the Query/Allowance RPC method."
        },
        "cosmos.feegrant.v1beta1.Grant": {
          "properties": {
            "granter": {
              "type": "string",
              "description": "granter is the address of the user granting an allowance of their funds."
            },
            "grantee": {
              "type": "string",
              "description": "grantee is the address of the user being granted an allowance of another user's funds."
            },
            "allowance": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "allowance can be any of basic and filtered fee allowance."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Grant",
          "description": "Grant is stored in the KVStore to record a grant with full context"
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "granter",
          "grantee"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.feegrant.v1beta1/QueryAllowances": {
    "module_name": "cosmos.feegrant.v1beta1",
    "name": "Allowances",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllowancesRequest",
      "definitions": {
        "QueryAllowancesRequest": {
          "properties": {
            "grantee": {
              "type": "string"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Allowances Request",
          "description": "QueryAllowancesRequest is the request type for the Query/Allowances RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllowancesResponse",
      "definitions": {
        "QueryAllowancesResponse": {
          "properties": {
            "allowances": {
              "items": {
                "$ref": "#/definitions/cosmos.feegrant.v1beta1.Grant"
              },
              "type": "array",
              "description": "allowances are allowance's granted for grantee by granter."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines an pagination for the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Allowances Response",
          "description": "QueryAllowancesResponse is the response type for the Query/Allowances RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.feegrant.v1beta1.Grant": {
          "properties": {
            "granter": {
              "type": "string",
              "description": "granter is the address of the user granting an allowance of their funds."
            },
            "grantee": {
              "type": "string",
              "description": "grantee is the address of the user being granted an allowance of another user's funds."
            },
            "allowance": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "allowance can be any of basic and filtered fee allowance."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Grant",
          "description": "Grant is stored in the KVStore to record a grant with full context"
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "grantee"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.feegrant.v1beta1/sendMsgGrantAllowance": {
    "module_name": "cosmos.feegrant.v1beta1",
    "name": "GrantAllowance",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgGrantAllowance",
      "definitions": {
        "MsgGrantAllowance": {
          "properties": {
            "granter": {
              "type": "string",
              "description": "granter is the address of the user granting an allowance of their funds."
            },
            "grantee": {
              "type": "string",
              "description": "grantee is the address of the user being granted an allowance of another user's funds."
            },
            "allowance": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "allowance can be any of basic and filtered fee allowance."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Grant Allowance",
          "description": "MsgGrantAllowance adds permission for Grantee to spend up to Allowance of fees from the account of Granter."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgGrantAllowanceResponse",
      "definitions": {
        "MsgGrantAllowanceResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Grant Allowance Response",
          "description": "MsgGrantAllowanceResponse defines the Msg/GrantAllowanceResponse response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.feegrant.v1beta1/sendMsgRevokeAllowance": {
    "module_name": "cosmos.feegrant.v1beta1",
    "name": "RevokeAllowance",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRevokeAllowance",
      "definitions": {
        "MsgRevokeAllowance": {
          "properties": {
            "granter": {
              "type": "string",
              "description": "granter is the address of the user granting an allowance of their funds."
            },
            "grantee": {
              "type": "string",
              "description": "grantee is the address of the user being granted an allowance of another user's funds."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Revoke Allowance",
          "description": "MsgRevokeAllowance removes any existing Allowance from Granter to Grantee."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRevokeAllowanceResponse",
      "definitions": {
        "MsgRevokeAllowanceResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Revoke Allowance Response",
          "description": "MsgRevokeAllowanceResponse defines the Msg/RevokeAllowanceResponse response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.gov.v1beta1/QueryProposal": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Proposal",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryProposalRequest",
      "definitions": {
        "QueryProposalRequest": {
          "properties": {
            "proposal_id": {
              "type": "string",
              "description": "proposal_id defines the unique id of the proposal."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Proposal Request",
          "description": "QueryProposalRequest is the request type for the Query/Proposal RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryProposalResponse",
      "definitions": {
        "QueryProposalResponse": {
          "properties": {
            "proposal": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.Proposal",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Proposal Response",
          "description": "QueryProposalResponse is the response type for the Query/Proposal RPC method."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.gov.v1beta1.Proposal": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "content": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object"
            },
            "status": {
              "enum": [
                "PROPOSAL_STATUS_UNSPECIFIED",
                0,
                "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                1,
                "PROPOSAL_STATUS_VOTING_PERIOD",
                2,
                "PROPOSAL_STATUS_PASSED",
                3,
                "PROPOSAL_STATUS_REJECTED",
                4,
                "PROPOSAL_STATUS_FAILED",
                5
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Proposal Status",
              "description": "ProposalStatus enumerates the valid statuses of a proposal."
            },
            "final_tally_result": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.TallyResult",
              "additionalProperties": true
            },
            "submit_time": {
              "type": "string",
              "format": "date-time"
            },
            "deposit_end_time": {
              "type": "string",
              "format": "date-time"
            },
            "total_deposit": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            },
            "voting_start_time": {
              "type": "string",
              "format": "date-time"
            },
            "voting_end_time": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Proposal",
          "description": "Proposal defines the core field members of a governance proposal."
        },
        "cosmos.gov.v1beta1.TallyResult": {
          "properties": {
            "yes": {
              "type": "string"
            },
            "abstain": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "no_with_veto": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Tally Result",
          "description": "TallyResult defines a standard tally for a governance proposal."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "proposal_id"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/QueryProposals": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Proposals",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryProposalsRequest",
      "definitions": {
        "QueryProposalsRequest": {
          "properties": {
            "proposal_status": {
              "enum": [
                "PROPOSAL_STATUS_UNSPECIFIED",
                0,
                "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                1,
                "PROPOSAL_STATUS_VOTING_PERIOD",
                2,
                "PROPOSAL_STATUS_PASSED",
                3,
                "PROPOSAL_STATUS_REJECTED",
                4,
                "PROPOSAL_STATUS_FAILED",
                5
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Proposal Status",
              "description": "ProposalStatus enumerates the valid statuses of a proposal."
            },
            "voter": {
              "type": "string",
              "description": "voter defines the voter address for the proposals."
            },
            "depositor": {
              "type": "string",
              "description": "depositor defines the deposit addresses from the proposals."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Proposals Request",
          "description": "QueryProposalsRequest is the request type for the Query/Proposals RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryProposalsResponse",
      "definitions": {
        "QueryProposalsResponse": {
          "properties": {
            "proposals": {
              "items": {
                "$ref": "#/definitions/cosmos.gov.v1beta1.Proposal"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Proposals Response",
          "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.gov.v1beta1.Proposal": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "content": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object"
            },
            "status": {
              "enum": [
                "PROPOSAL_STATUS_UNSPECIFIED",
                0,
                "PROPOSAL_STATUS_DEPOSIT_PERIOD",
                1,
                "PROPOSAL_STATUS_VOTING_PERIOD",
                2,
                "PROPOSAL_STATUS_PASSED",
                3,
                "PROPOSAL_STATUS_REJECTED",
                4,
                "PROPOSAL_STATUS_FAILED",
                5
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Proposal Status",
              "description": "ProposalStatus enumerates the valid statuses of a proposal."
            },
            "final_tally_result": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.TallyResult",
              "additionalProperties": true
            },
            "submit_time": {
              "type": "string",
              "format": "date-time"
            },
            "deposit_end_time": {
              "type": "string",
              "format": "date-time"
            },
            "total_deposit": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            },
            "voting_start_time": {
              "type": "string",
              "format": "date-time"
            },
            "voting_end_time": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Proposal",
          "description": "Proposal defines the core field members of a governance proposal."
        },
        "cosmos.gov.v1beta1.TallyResult": {
          "properties": {
            "yes": {
              "type": "string"
            },
            "abstain": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "no_with_veto": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Tally Result",
          "description": "TallyResult defines a standard tally for a governance proposal."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/QueryVote": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Vote",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryVoteRequest",
      "definitions": {
        "QueryVoteRequest": {
          "properties": {
            "proposal_id": {
              "type": "string",
              "description": "proposal_id defines the unique id of the proposal."
            },
            "voter": {
              "type": "string",
              "description": "voter defines the oter address for the proposals."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Vote Request",
          "description": "QueryVoteRequest is the request type for the Query/Vote RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryVoteResponse",
      "definitions": {
        "QueryVoteResponse": {
          "properties": {
            "vote": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.Vote",
              "additionalProperties": true,
              "description": "vote defined the queried vote."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Vote Response",
          "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
        },
        "cosmos.gov.v1beta1.Vote": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "voter": {
              "type": "string"
            },
            "option": {
              "enum": [
                "VOTE_OPTION_UNSPECIFIED",
                0,
                "VOTE_OPTION_YES",
                1,
                "VOTE_OPTION_ABSTAIN",
                2,
                "VOTE_OPTION_NO",
                3,
                "VOTE_OPTION_NO_WITH_VETO",
                4
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Vote Option",
              "description": "VoteOption enumerates the valid vote options for a given governance proposal."
            },
            "options": {
              "items": {
                "$ref": "#/definitions/cosmos.gov.v1beta1.WeightedVoteOption"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Vote",
          "description": "Vote defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option."
        },
        "cosmos.gov.v1beta1.WeightedVoteOption": {
          "properties": {
            "option": {
              "enum": [
                "VOTE_OPTION_UNSPECIFIED",
                0,
                "VOTE_OPTION_YES",
                1,
                "VOTE_OPTION_ABSTAIN",
                2,
                "VOTE_OPTION_NO",
                3,
                "VOTE_OPTION_NO_WITH_VETO",
                4
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Vote Option",
              "description": "VoteOption enumerates the valid vote options for a given governance proposal."
            },
            "weight": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Weighted Vote Option",
          "description": "WeightedVoteOption defines a unit of vote for vote split."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "proposal_id",
          "voter"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/QueryVotes": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Votes",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryVotesRequest",
      "definitions": {
        "QueryVotesRequest": {
          "properties": {
            "proposal_id": {
              "type": "string",
              "description": "proposal_id defines the unique id of the proposal."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Votes Request",
          "description": "QueryVotesRequest is the request type for the Query/Votes RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryVotesResponse",
      "definitions": {
        "QueryVotesResponse": {
          "properties": {
            "votes": {
              "items": {
                "$ref": "#/definitions/cosmos.gov.v1beta1.Vote"
              },
              "type": "array",
              "description": "votes defined the queried votes."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Votes Response",
          "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.gov.v1beta1.Vote": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "voter": {
              "type": "string"
            },
            "option": {
              "enum": [
                "VOTE_OPTION_UNSPECIFIED",
                0,
                "VOTE_OPTION_YES",
                1,
                "VOTE_OPTION_ABSTAIN",
                2,
                "VOTE_OPTION_NO",
                3,
                "VOTE_OPTION_NO_WITH_VETO",
                4
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Vote Option",
              "description": "VoteOption enumerates the valid vote options for a given governance proposal."
            },
            "options": {
              "items": {
                "$ref": "#/definitions/cosmos.gov.v1beta1.WeightedVoteOption"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Vote",
          "description": "Vote defines a vote on a governance proposal. A Vote consists of a proposal ID, the voter, and the vote option."
        },
        "cosmos.gov.v1beta1.WeightedVoteOption": {
          "properties": {
            "option": {
              "enum": [
                "VOTE_OPTION_UNSPECIFIED",
                0,
                "VOTE_OPTION_YES",
                1,
                "VOTE_OPTION_ABSTAIN",
                2,
                "VOTE_OPTION_NO",
                3,
                "VOTE_OPTION_NO_WITH_VETO",
                4
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Vote Option",
              "description": "VoteOption enumerates the valid vote options for a given governance proposal."
            },
            "weight": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Weighted Vote Option",
          "description": "WeightedVoteOption defines a unit of vote for vote split."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "proposal_id"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/QueryParams": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Params",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsRequest",
      "definitions": {
        "QueryParamsRequest": {
          "properties": {
            "params_type": {
              "type": "string",
              "description": "params_type defines which parameters to query for, can be one of \"voting\", \"tallying\" or \"deposit\"."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Request",
          "description": "QueryParamsRequest is the request type for the Query/Params RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsResponse",
      "definitions": {
        "QueryParamsResponse": {
          "properties": {
            "voting_params": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.VotingParams",
              "additionalProperties": true,
              "description": "voting_params defines the parameters related to voting."
            },
            "deposit_params": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.DepositParams",
              "additionalProperties": true,
              "description": "deposit_params defines the parameters related to deposit."
            },
            "tally_params": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.TallyParams",
              "additionalProperties": true,
              "description": "tally_params defines the parameters related to tally."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Response",
          "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.gov.v1beta1.DepositParams": {
          "properties": {
            "min_deposit": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array",
              "description": "Minimum deposit for a proposal to enter voting period."
            },
            "max_deposit_period": {
              "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
              "type": "string",
              "description": "Maximum period for Atom holders to deposit on a proposal. Initial value: 2  months.",
              "format": "regex"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Deposit Params",
          "description": "DepositParams defines the params for deposits on governance proposals."
        },
        "cosmos.gov.v1beta1.TallyParams": {
          "properties": {
            "quorum": {
              "type": "string",
              "description": "Minimum percentage of total stake needed to vote for a result to be  considered valid.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "threshold": {
              "type": "string",
              "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "veto_threshold": {
              "type": "string",
              "description": "Minimum value of Veto votes to Total votes ratio for proposal to be  vetoed. Default value: 1/3.",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Tally Params",
          "description": "TallyParams defines the params for tallying votes on governance proposals."
        },
        "cosmos.gov.v1beta1.VotingParams": {
          "properties": {
            "voting_period": {
              "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
              "type": "string",
              "description": "Length of the voting period.",
              "format": "regex"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Voting Params",
          "description": "VotingParams defines the params for voting on governance proposals."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "params_type"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/QueryDeposit": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Deposit",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDepositRequest",
      "definitions": {
        "QueryDepositRequest": {
          "properties": {
            "proposal_id": {
              "type": "string",
              "description": "proposal_id defines the unique id of the proposal."
            },
            "depositor": {
              "type": "string",
              "description": "depositor defines the deposit addresses from the proposals."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Deposit Request",
          "description": "QueryDepositRequest is the request type for the Query/Deposit RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDepositResponse",
      "definitions": {
        "QueryDepositResponse": {
          "properties": {
            "deposit": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.Deposit",
              "additionalProperties": true,
              "description": "deposit defines the requested deposit."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Deposit Response",
          "description": "QueryDepositResponse is the response type for the Query/Deposit RPC method."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.gov.v1beta1.Deposit": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "depositor": {
              "type": "string"
            },
            "amount": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Deposit",
          "description": "Deposit defines an amount deposited by an account address to an active proposal."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "proposal_id",
          "depositor"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/QueryDeposits": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Deposits",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDepositsRequest",
      "definitions": {
        "QueryDepositsRequest": {
          "properties": {
            "proposal_id": {
              "type": "string",
              "description": "proposal_id defines the unique id of the proposal."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Deposits Request",
          "description": "QueryDepositsRequest is the request type for the Query/Deposits RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDepositsResponse",
      "definitions": {
        "QueryDepositsResponse": {
          "properties": {
            "deposits": {
              "items": {
                "$ref": "#/definitions/cosmos.gov.v1beta1.Deposit"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Deposits Response",
          "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.gov.v1beta1.Deposit": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "depositor": {
              "type": "string"
            },
            "amount": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Deposit",
          "description": "Deposit defines an amount deposited by an account address to an active proposal."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "proposal_id"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/QueryTallyResult": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "TallyResult",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryTallyResultRequest",
      "definitions": {
        "QueryTallyResultRequest": {
          "properties": {
            "proposal_id": {
              "type": "string",
              "description": "proposal_id defines the unique id of the proposal."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Tally Result Request",
          "description": "QueryTallyResultRequest is the request type for the Query/Tally RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryTallyResultResponse",
      "definitions": {
        "QueryTallyResultResponse": {
          "properties": {
            "tally": {
              "$ref": "#/definitions/cosmos.gov.v1beta1.TallyResult",
              "additionalProperties": true,
              "description": "tally defines the requested tally."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Tally Result Response",
          "description": "QueryTallyResultResponse is the response type for the Query/Tally RPC method."
        },
        "cosmos.gov.v1beta1.TallyResult": {
          "properties": {
            "yes": {
              "type": "string"
            },
            "abstain": {
              "type": "string"
            },
            "no": {
              "type": "string"
            },
            "no_with_veto": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Tally Result",
          "description": "TallyResult defines a standard tally for a governance proposal."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "proposal_id"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.gov.v1beta1/sendMsgSubmitProposal": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "SubmitProposal",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSubmitProposal",
      "definitions": {
        "MsgSubmitProposal": {
          "properties": {
            "content": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object"
            },
            "initial_deposit": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            },
            "proposer": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Submit Proposal",
          "description": "MsgSubmitProposal defines an sdk.Msg type that supports submitting arbitrary proposal Content."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgSubmitProposalResponse",
      "definitions": {
        "MsgSubmitProposalResponse": {
          "properties": {
            "proposal_id": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Submit Proposal Response",
          "description": "MsgSubmitProposalResponse defines the Msg/SubmitProposal response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.gov.v1beta1/sendMsgVote": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Vote",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgVote",
      "definitions": {
        "MsgVote": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "voter": {
              "type": "string"
            },
            "option": {
              "enum": [
                "VOTE_OPTION_UNSPECIFIED",
                0,
                "VOTE_OPTION_YES",
                1,
                "VOTE_OPTION_ABSTAIN",
                2,
                "VOTE_OPTION_NO",
                3,
                "VOTE_OPTION_NO_WITH_VETO",
                4
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Vote Option",
              "description": "VoteOption enumerates the valid vote options for a given governance proposal."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Vote",
          "description": "MsgVote defines a message to cast a vote."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgVoteResponse",
      "definitions": {
        "MsgVoteResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Vote Response",
          "description": "MsgVoteResponse defines the Msg/Vote response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.gov.v1beta1/sendMsgVoteWeighted": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "VoteWeighted",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgVoteWeighted",
      "definitions": {
        "MsgVoteWeighted": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "voter": {
              "type": "string"
            },
            "options": {
              "items": {
                "$ref": "#/definitions/cosmos.gov.v1beta1.WeightedVoteOption"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Vote Weighted",
          "description": "MsgVoteWeighted defines a message to cast a vote."
        },
        "cosmos.gov.v1beta1.WeightedVoteOption": {
          "properties": {
            "option": {
              "enum": [
                "VOTE_OPTION_UNSPECIFIED",
                0,
                "VOTE_OPTION_YES",
                1,
                "VOTE_OPTION_ABSTAIN",
                2,
                "VOTE_OPTION_NO",
                3,
                "VOTE_OPTION_NO_WITH_VETO",
                4
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Vote Option",
              "description": "VoteOption enumerates the valid vote options for a given governance proposal."
            },
            "weight": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Weighted Vote Option",
          "description": "WeightedVoteOption defines a unit of vote for vote split."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgVoteWeightedResponse",
      "definitions": {
        "MsgVoteWeightedResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Vote Weighted Response",
          "description": "MsgVoteWeightedResponse defines the Msg/VoteWeighted response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.gov.v1beta1/sendMsgDeposit": {
    "module_name": "cosmos.gov.v1beta1",
    "name": "Deposit",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDeposit",
      "definitions": {
        "MsgDeposit": {
          "properties": {
            "proposal_id": {
              "type": "string"
            },
            "depositor": {
              "type": "string"
            },
            "amount": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Deposit",
          "description": "MsgDeposit defines a message to submit a deposit to an existing proposal."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDepositResponse",
      "definitions": {
        "MsgDepositResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Deposit Response",
          "description": "MsgDepositResponse defines the Msg/Deposit response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.slashing.v1beta1/QueryParams": {
    "module_name": "cosmos.slashing.v1beta1",
    "name": "Params",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsRequest",
      "definitions": {
        "QueryParamsRequest": {
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Request",
          "description": "QueryParamsRequest is the request type for the Query/Params RPC method"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsResponse",
      "definitions": {
        "QueryParamsResponse": {
          "properties": {
            "params": {
              "$ref": "#/definitions/cosmos.slashing.v1beta1.Params",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Response",
          "description": "QueryParamsResponse is the response type for the Query/Params RPC method"
        },
        "cosmos.slashing.v1beta1.Params": {
          "properties": {
            "signed_blocks_window": {
              "type": "string"
            },
            "min_signed_per_window": {
              "type": "string",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "downtime_jail_duration": {
              "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
              "type": "string",
              "format": "regex"
            },
            "slash_fraction_double_sign": {
              "type": "string",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "slash_fraction_downtime": {
              "type": "string",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Params",
          "description": "Params represents the parameters used for by the slashing module."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.slashing.v1beta1/QuerySigningInfo": {
    "module_name": "cosmos.slashing.v1beta1",
    "name": "SigningInfo",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QuerySigningInfoRequest",
      "definitions": {
        "QuerySigningInfoRequest": {
          "properties": {
            "cons_address": {
              "type": "string",
              "description": "cons_address is the address to query signing info of"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Signing Info Request",
          "description": "QuerySigningInfoRequest is the request type for the Query/SigningInfo RPC method"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QuerySigningInfoResponse",
      "definitions": {
        "QuerySigningInfoResponse": {
          "properties": {
            "val_signing_info": {
              "$ref": "#/definitions/cosmos.slashing.v1beta1.ValidatorSigningInfo",
              "additionalProperties": true,
              "description": "val_signing_info is the signing info of requested val cons address"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Signing Info Response",
          "description": "QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC method"
        },
        "cosmos.slashing.v1beta1.ValidatorSigningInfo": {
          "properties": {
            "address": {
              "type": "string"
            },
            "start_height": {
              "type": "string",
              "description": "Height at which validator was first a candidate OR was unjailed"
            },
            "index_offset": {
              "type": "string",
              "description": "Index which is incremented each time the validator was a bonded in a block and may have signed a precommit or not. This in conjunction with the `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`."
            },
            "jailed_until": {
              "type": "string",
              "description": "Timestamp until which the validator is jailed due to liveness downtime.",
              "format": "date-time"
            },
            "tombstoned": {
              "type": "boolean",
              "description": "Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehiavor."
            },
            "missed_blocks_counter": {
              "type": "string",
              "description": "A counter kept to avoid unnecessary array reads. Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator Signing Info",
          "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their liveness activity."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "cons_address"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.slashing.v1beta1/QuerySigningInfos": {
    "module_name": "cosmos.slashing.v1beta1",
    "name": "SigningInfos",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QuerySigningInfosRequest",
      "definitions": {
        "QuerySigningInfosRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Signing Infos Request",
          "description": "QuerySigningInfosRequest is the request type for the Query/SigningInfos RPC method"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QuerySigningInfosResponse",
      "definitions": {
        "QuerySigningInfosResponse": {
          "properties": {
            "info": {
              "items": {
                "$ref": "#/definitions/cosmos.slashing.v1beta1.ValidatorSigningInfo"
              },
              "type": "array",
              "description": "info is the signing info of all validators"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Signing Infos Response",
          "description": "QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC method"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.slashing.v1beta1.ValidatorSigningInfo": {
          "properties": {
            "address": {
              "type": "string"
            },
            "start_height": {
              "type": "string",
              "description": "Height at which validator was first a candidate OR was unjailed"
            },
            "index_offset": {
              "type": "string",
              "description": "Index which is incremented each time the validator was a bonded in a block and may have signed a precommit or not. This in conjunction with the `SignedBlocksWindow` param determines the index in the `MissedBlocksBitArray`."
            },
            "jailed_until": {
              "type": "string",
              "description": "Timestamp until which the validator is jailed due to liveness downtime.",
              "format": "date-time"
            },
            "tombstoned": {
              "type": "boolean",
              "description": "Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehiavor."
            },
            "missed_blocks_counter": {
              "type": "string",
              "description": "A counter kept to avoid unnecessary array reads. Note that `Sum(MissedBlocksBitArray)` always equals `MissedBlocksCounter`."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator Signing Info",
          "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their liveness activity."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.slashing.v1beta1/sendMsgUnjail": {
    "module_name": "cosmos.slashing.v1beta1",
    "name": "Unjail",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUnjail",
      "definitions": {
        "MsgUnjail": {
          "properties": {
            "validator_addr": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Unjail",
          "description": "MsgUnjail defines the Msg/Unjail request type"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUnjailResponse",
      "definitions": {
        "MsgUnjailResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Unjail Response",
          "description": "MsgUnjailResponse defines the Msg/Unjail response type"
        }
      }
    },
    "http_rules": null
  },
  "cosmos.staking.v1beta1/QueryValidators": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Validators",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorsRequest",
      "definitions": {
        "QueryValidatorsRequest": {
          "properties": {
            "status": {
              "type": "string",
              "description": "status enables to query for validators matching a given status."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validators Request",
          "description": "QueryValidatorsRequest is request type for Query/Validators RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorsResponse",
      "definitions": {
        "QueryValidatorsResponse": {
          "properties": {
            "validators": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.Validator"
              },
              "type": "array",
              "description": "validators contains all the queried validators."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validators Response",
          "description": "QueryValidatorsResponse is response type for the Query/Validators RPC method"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.staking.v1beta1.Commission": {
          "properties": {
            "commission_rates": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.CommissionRates",
              "additionalProperties": true,
              "description": "commission_rates defines the initial commission rates to be used for creating a validator."
            },
            "update_time": {
              "type": "string",
              "description": "update_time is the last time the commission rate was changed.",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission",
          "description": "Commission defines commission parameters for a given validator."
        },
        "cosmos.staking.v1beta1.CommissionRates": {
          "properties": {
            "rate": {
              "type": "string",
              "description": "rate is the commission rate charged to delegators, as a fraction."
            },
            "max_rate": {
              "type": "string",
              "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
            },
            "max_change_rate": {
              "type": "string",
              "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission Rates",
          "description": "CommissionRates defines the initial commission rates to be used for creating a validator."
        },
        "cosmos.staking.v1beta1.Description": {
          "properties": {
            "moniker": {
              "type": "string",
              "description": "moniker defines a human-readable name for the validator."
            },
            "identity": {
              "type": "string",
              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
            },
            "website": {
              "type": "string",
              "description": "website defines an optional website link."
            },
            "security_contact": {
              "type": "string",
              "description": "security_contact defines an optional email for security contact."
            },
            "details": {
              "type": "string",
              "description": "details define other optional details."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Description",
          "description": "Description defines a validator description."
        },
        "cosmos.staking.v1beta1.Validator": {
          "properties": {
            "operator_address": {
              "type": "string",
              "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
            },
            "consensus_pubkey": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "consensus_pubkey is the consensus public key of the validator, as a Protobuf Any."
            },
            "jailed": {
              "type": "boolean",
              "description": "jailed defined whether the validator has been jailed from bonded status or not."
            },
            "status": {
              "enum": [
                "BOND_STATUS_UNSPECIFIED",
                0,
                "BOND_STATUS_UNBONDED",
                1,
                "BOND_STATUS_UNBONDING",
                2,
                "BOND_STATUS_BONDED",
                3
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Bond Status",
              "description": "BondStatus is the status of a validator."
            },
            "tokens": {
              "type": "string",
              "description": "tokens define the delegated tokens (incl. self-delegation)."
            },
            "delegator_shares": {
              "type": "string",
              "description": "delegator_shares defines total shares issued to a validator's delegators."
            },
            "description": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
              "additionalProperties": true,
              "description": "description defines the description terms for the validator."
            },
            "unbonding_height": {
              "type": "string",
              "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
            },
            "unbonding_time": {
              "type": "string",
              "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
              "format": "date-time"
            },
            "commission": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Commission",
              "additionalProperties": true,
              "description": "commission defines the commission parameters."
            },
            "min_self_delegation": {
              "type": "string",
              "description": "min_self_delegation is the validator's self declared minimum self delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator",
          "description": "Validator defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryValidator": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Validator",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorRequest",
      "definitions": {
        "QueryValidatorRequest": {
          "properties": {
            "validator_addr": {
              "type": "string",
              "description": "validator_addr defines the validator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Request",
          "description": "QueryValidatorRequest is response type for the Query/Validator RPC method"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorResponse",
      "definitions": {
        "QueryValidatorResponse": {
          "properties": {
            "validator": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Validator",
              "additionalProperties": true,
              "description": "validator defines the the validator info."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Response",
          "description": "QueryValidatorResponse is response type for the Query/Validator RPC method"
        },
        "cosmos.staking.v1beta1.Commission": {
          "properties": {
            "commission_rates": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.CommissionRates",
              "additionalProperties": true,
              "description": "commission_rates defines the initial commission rates to be used for creating a validator."
            },
            "update_time": {
              "type": "string",
              "description": "update_time is the last time the commission rate was changed.",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission",
          "description": "Commission defines commission parameters for a given validator."
        },
        "cosmos.staking.v1beta1.CommissionRates": {
          "properties": {
            "rate": {
              "type": "string",
              "description": "rate is the commission rate charged to delegators, as a fraction."
            },
            "max_rate": {
              "type": "string",
              "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
            },
            "max_change_rate": {
              "type": "string",
              "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission Rates",
          "description": "CommissionRates defines the initial commission rates to be used for creating a validator."
        },
        "cosmos.staking.v1beta1.Description": {
          "properties": {
            "moniker": {
              "type": "string",
              "description": "moniker defines a human-readable name for the validator."
            },
            "identity": {
              "type": "string",
              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
            },
            "website": {
              "type": "string",
              "description": "website defines an optional website link."
            },
            "security_contact": {
              "type": "string",
              "description": "security_contact defines an optional email for security contact."
            },
            "details": {
              "type": "string",
              "description": "details define other optional details."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Description",
          "description": "Description defines a validator description."
        },
        "cosmos.staking.v1beta1.Validator": {
          "properties": {
            "operator_address": {
              "type": "string",
              "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
            },
            "consensus_pubkey": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "consensus_pubkey is the consensus public key of the validator, as a Protobuf Any."
            },
            "jailed": {
              "type": "boolean",
              "description": "jailed defined whether the validator has been jailed from bonded status or not."
            },
            "status": {
              "enum": [
                "BOND_STATUS_UNSPECIFIED",
                0,
                "BOND_STATUS_UNBONDED",
                1,
                "BOND_STATUS_UNBONDING",
                2,
                "BOND_STATUS_BONDED",
                3
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Bond Status",
              "description": "BondStatus is the status of a validator."
            },
            "tokens": {
              "type": "string",
              "description": "tokens define the delegated tokens (incl. self-delegation)."
            },
            "delegator_shares": {
              "type": "string",
              "description": "delegator_shares defines total shares issued to a validator's delegators."
            },
            "description": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
              "additionalProperties": true,
              "description": "description defines the description terms for the validator."
            },
            "unbonding_height": {
              "type": "string",
              "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
            },
            "unbonding_time": {
              "type": "string",
              "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
              "format": "date-time"
            },
            "commission": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Commission",
              "additionalProperties": true,
              "description": "commission defines the commission parameters."
            },
            "min_self_delegation": {
              "type": "string",
              "description": "min_self_delegation is the validator's self declared minimum self delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator",
          "description": "Validator defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_addr"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryValidatorDelegations": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "ValidatorDelegations",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorDelegationsRequest",
      "definitions": {
        "QueryValidatorDelegationsRequest": {
          "properties": {
            "validator_addr": {
              "type": "string",
              "description": "validator_addr defines the validator address to query for."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Delegations Request",
          "description": "QueryValidatorDelegationsRequest is request type for the Query/ValidatorDelegations RPC method"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorDelegationsResponse",
      "definitions": {
        "QueryValidatorDelegationsResponse": {
          "properties": {
            "delegation_responses": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.DelegationResponse"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Delegations Response",
          "description": "QueryValidatorDelegationsResponse is response type for the Query/ValidatorDelegations RPC method"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.staking.v1beta1.Delegation": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address is the bech32-encoded address of the delegator."
            },
            "validator_address": {
              "type": "string",
              "description": "validator_address is the bech32-encoded address of the validator."
            },
            "shares": {
              "type": "string",
              "description": "shares define the delegation shares received."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Delegation",
          "description": "Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator."
        },
        "cosmos.staking.v1beta1.DelegationResponse": {
          "properties": {
            "delegation": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Delegation",
              "additionalProperties": true
            },
            "balance": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Delegation Response",
          "description": "DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_addr"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryValidatorUnbondingDelegations": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "ValidatorUnbondingDelegations",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorUnbondingDelegationsRequest",
      "definitions": {
        "QueryValidatorUnbondingDelegationsRequest": {
          "properties": {
            "validator_addr": {
              "type": "string",
              "description": "validator_addr defines the validator address to query for."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Unbonding Delegations Request",
          "description": "QueryValidatorUnbondingDelegationsRequest is required type for the Query/ValidatorUnbondingDelegations RPC method"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryValidatorUnbondingDelegationsResponse",
      "definitions": {
        "QueryValidatorUnbondingDelegationsResponse": {
          "properties": {
            "unbonding_responses": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.UnbondingDelegation"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Validator Unbonding Delegations Response",
          "description": "QueryValidatorUnbondingDelegationsResponse is response type for the Query/ValidatorUnbondingDelegations RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.staking.v1beta1.UnbondingDelegation": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address is the bech32-encoded address of the delegator."
            },
            "validator_address": {
              "type": "string",
              "description": "validator_address is the bech32-encoded address of the validator."
            },
            "entries": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.UnbondingDelegationEntry"
              },
              "type": "array",
              "description": "entries are the unbonding delegation entries.  unbonding delegation entries"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Unbonding Delegation",
          "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list."
        },
        "cosmos.staking.v1beta1.UnbondingDelegationEntry": {
          "properties": {
            "creation_height": {
              "type": "string",
              "description": "creation_height is the height which the unbonding took place."
            },
            "completion_time": {
              "type": "string",
              "description": "completion_time is the unix time for unbonding completion.",
              "format": "date-time"
            },
            "initial_balance": {
              "type": "string",
              "description": "initial_balance defines the tokens initially scheduled to receive at completion."
            },
            "balance": {
              "type": "string",
              "description": "balance defines the tokens to receive at completion."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Unbonding Delegation Entry",
          "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_addr"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryDelegation": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Delegation",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegationRequest",
      "definitions": {
        "QueryDelegationRequest": {
          "properties": {
            "delegator_addr": {
              "type": "string",
              "description": "delegator_addr defines the delegator address to query for."
            },
            "validator_addr": {
              "type": "string",
              "description": "validator_addr defines the validator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegation Request",
          "description": "QueryDelegationRequest is request type for the Query/Delegation RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegationResponse",
      "definitions": {
        "QueryDelegationResponse": {
          "properties": {
            "delegation_response": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.DelegationResponse",
              "additionalProperties": true,
              "description": "delegation_responses defines the delegation info of a delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegation Response",
          "description": "QueryDelegationResponse is response type for the Query/Delegation RPC method."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.staking.v1beta1.Delegation": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address is the bech32-encoded address of the delegator."
            },
            "validator_address": {
              "type": "string",
              "description": "validator_address is the bech32-encoded address of the validator."
            },
            "shares": {
              "type": "string",
              "description": "shares define the delegation shares received."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Delegation",
          "description": "Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator."
        },
        "cosmos.staking.v1beta1.DelegationResponse": {
          "properties": {
            "delegation": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Delegation",
              "additionalProperties": true
            },
            "balance": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Delegation Response",
          "description": "DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_addr",
          "delegator_addr"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryUnbondingDelegation": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "UnbondingDelegation",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryUnbondingDelegationRequest",
      "definitions": {
        "QueryUnbondingDelegationRequest": {
          "properties": {
            "delegator_addr": {
              "type": "string",
              "description": "delegator_addr defines the delegator address to query for."
            },
            "validator_addr": {
              "type": "string",
              "description": "validator_addr defines the validator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Unbonding Delegation Request",
          "description": "QueryUnbondingDelegationRequest is request type for the Query/UnbondingDelegation RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryUnbondingDelegationResponse",
      "definitions": {
        "QueryUnbondingDelegationResponse": {
          "properties": {
            "unbond": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.UnbondingDelegation",
              "additionalProperties": true,
              "description": "unbond defines the unbonding information of a delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Unbonding Delegation Response",
          "description": "QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method."
        },
        "cosmos.staking.v1beta1.UnbondingDelegation": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address is the bech32-encoded address of the delegator."
            },
            "validator_address": {
              "type": "string",
              "description": "validator_address is the bech32-encoded address of the validator."
            },
            "entries": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.UnbondingDelegationEntry"
              },
              "type": "array",
              "description": "entries are the unbonding delegation entries.  unbonding delegation entries"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Unbonding Delegation",
          "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list."
        },
        "cosmos.staking.v1beta1.UnbondingDelegationEntry": {
          "properties": {
            "creation_height": {
              "type": "string",
              "description": "creation_height is the height which the unbonding took place."
            },
            "completion_time": {
              "type": "string",
              "description": "completion_time is the unix time for unbonding completion.",
              "format": "date-time"
            },
            "initial_balance": {
              "type": "string",
              "description": "initial_balance defines the tokens initially scheduled to receive at completion."
            },
            "balance": {
              "type": "string",
              "description": "balance defines the tokens to receive at completion."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Unbonding Delegation Entry",
          "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "validator_addr",
          "delegator_addr"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryDelegatorDelegations": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "DelegatorDelegations",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorDelegationsRequest",
      "definitions": {
        "QueryDelegatorDelegationsRequest": {
          "properties": {
            "delegator_addr": {
              "type": "string",
              "description": "delegator_addr defines the delegator address to query for."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Delegations Request",
          "description": "QueryDelegatorDelegationsRequest is request type for the Query/DelegatorDelegations RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorDelegationsResponse",
      "definitions": {
        "QueryDelegatorDelegationsResponse": {
          "properties": {
            "delegation_responses": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.DelegationResponse"
              },
              "type": "array",
              "description": "delegation_responses defines all the delegations' info of a delegator."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Delegations Response",
          "description": "QueryDelegatorDelegationsResponse is response type for the Query/DelegatorDelegations RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.staking.v1beta1.Delegation": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address is the bech32-encoded address of the delegator."
            },
            "validator_address": {
              "type": "string",
              "description": "validator_address is the bech32-encoded address of the validator."
            },
            "shares": {
              "type": "string",
              "description": "shares define the delegation shares received."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Delegation",
          "description": "Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator."
        },
        "cosmos.staking.v1beta1.DelegationResponse": {
          "properties": {
            "delegation": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Delegation",
              "additionalProperties": true
            },
            "balance": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Delegation Response",
          "description": "DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_addr"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryDelegatorUnbondingDelegations": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "DelegatorUnbondingDelegations",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorUnbondingDelegationsRequest",
      "definitions": {
        "QueryDelegatorUnbondingDelegationsRequest": {
          "properties": {
            "delegator_addr": {
              "type": "string",
              "description": "delegator_addr defines the delegator address to query for."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Unbonding Delegations Request",
          "description": "QueryDelegatorUnbondingDelegationsRequest is request type for the Query/DelegatorUnbondingDelegations RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorUnbondingDelegationsResponse",
      "definitions": {
        "QueryDelegatorUnbondingDelegationsResponse": {
          "properties": {
            "unbonding_responses": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.UnbondingDelegation"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Unbonding Delegations Response",
          "description": "QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.staking.v1beta1.UnbondingDelegation": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address is the bech32-encoded address of the delegator."
            },
            "validator_address": {
              "type": "string",
              "description": "validator_address is the bech32-encoded address of the validator."
            },
            "entries": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.UnbondingDelegationEntry"
              },
              "type": "array",
              "description": "entries are the unbonding delegation entries.  unbonding delegation entries"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Unbonding Delegation",
          "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list."
        },
        "cosmos.staking.v1beta1.UnbondingDelegationEntry": {
          "properties": {
            "creation_height": {
              "type": "string",
              "description": "creation_height is the height which the unbonding took place."
            },
            "completion_time": {
              "type": "string",
              "description": "completion_time is the unix time for unbonding completion.",
              "format": "date-time"
            },
            "initial_balance": {
              "type": "string",
              "description": "initial_balance defines the tokens initially scheduled to receive at completion."
            },
            "balance": {
              "type": "string",
              "description": "balance defines the tokens to receive at completion."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Unbonding Delegation Entry",
          "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_addr"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryRedelegations": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Redelegations",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryRedelegationsRequest",
      "definitions": {
        "QueryRedelegationsRequest": {
          "properties": {
            "delegator_addr": {
              "type": "string",
              "description": "delegator_addr defines the delegator address to query for."
            },
            "src_validator_addr": {
              "type": "string",
              "description": "src_validator_addr defines the validator address to redelegate from."
            },
            "dst_validator_addr": {
              "type": "string",
              "description": "dst_validator_addr defines the validator address to redelegate to."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Redelegations Request",
          "description": "QueryRedelegationsRequest is request type for the Query/Redelegations RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryRedelegationsResponse",
      "definitions": {
        "QueryRedelegationsResponse": {
          "properties": {
            "redelegation_responses": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.RedelegationResponse"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Redelegations Response",
          "description": "QueryRedelegationsResponse is response type for the Query/Redelegations RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.staking.v1beta1.Redelegation": {
          "properties": {
            "delegator_address": {
              "type": "string",
              "description": "delegator_address is the bech32-encoded address of the delegator."
            },
            "validator_src_address": {
              "type": "string",
              "description": "validator_src_address is the validator redelegation source operator address."
            },
            "validator_dst_address": {
              "type": "string",
              "description": "validator_dst_address is the validator redelegation destination operator address."
            },
            "entries": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.RedelegationEntry"
              },
              "type": "array",
              "description": "entries are the redelegation entries.  redelegation entries"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Redelegation",
          "description": "Redelegation contains the list of a particular delegator's redelegating bonds from a particular source validator to a particular destination validator."
        },
        "cosmos.staking.v1beta1.RedelegationEntry": {
          "properties": {
            "creation_height": {
              "type": "string",
              "description": "creation_height  defines the height which the redelegation took place."
            },
            "completion_time": {
              "type": "string",
              "description": "completion_time defines the unix time for redelegation completion.",
              "format": "date-time"
            },
            "initial_balance": {
              "type": "string",
              "description": "initial_balance defines the initial balance when redelegation started."
            },
            "shares_dst": {
              "type": "string",
              "description": "shares_dst is the amount of destination-validator shares created by redelegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Redelegation Entry",
          "description": "RedelegationEntry defines a redelegation object with relevant metadata."
        },
        "cosmos.staking.v1beta1.RedelegationEntryResponse": {
          "properties": {
            "redelegation_entry": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.RedelegationEntry",
              "additionalProperties": true
            },
            "balance": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Redelegation Entry Response",
          "description": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses."
        },
        "cosmos.staking.v1beta1.RedelegationResponse": {
          "properties": {
            "redelegation": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Redelegation",
              "additionalProperties": true
            },
            "entries": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.RedelegationEntryResponse"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Redelegation Response",
          "description": "RedelegationResponse is equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_addr"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryDelegatorValidators": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "DelegatorValidators",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorValidatorsRequest",
      "definitions": {
        "QueryDelegatorValidatorsRequest": {
          "properties": {
            "delegator_addr": {
              "type": "string",
              "description": "delegator_addr defines the delegator address to query for."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Validators Request",
          "description": "QueryDelegatorValidatorsRequest is request type for the Query/DelegatorValidators RPC method."
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorValidatorsResponse",
      "definitions": {
        "QueryDelegatorValidatorsResponse": {
          "properties": {
            "validators": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.Validator"
              },
              "type": "array",
              "description": "validators defines the the validators' info of a delegator."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Validators Response",
          "description": "QueryDelegatorValidatorsResponse is response type for the Query/DelegatorValidators RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.staking.v1beta1.Commission": {
          "properties": {
            "commission_rates": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.CommissionRates",
              "additionalProperties": true,
              "description": "commission_rates defines the initial commission rates to be used for creating a validator."
            },
            "update_time": {
              "type": "string",
              "description": "update_time is the last time the commission rate was changed.",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission",
          "description": "Commission defines commission parameters for a given validator."
        },
        "cosmos.staking.v1beta1.CommissionRates": {
          "properties": {
            "rate": {
              "type": "string",
              "description": "rate is the commission rate charged to delegators, as a fraction."
            },
            "max_rate": {
              "type": "string",
              "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
            },
            "max_change_rate": {
              "type": "string",
              "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission Rates",
          "description": "CommissionRates defines the initial commission rates to be used for creating a validator."
        },
        "cosmos.staking.v1beta1.Description": {
          "properties": {
            "moniker": {
              "type": "string",
              "description": "moniker defines a human-readable name for the validator."
            },
            "identity": {
              "type": "string",
              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
            },
            "website": {
              "type": "string",
              "description": "website defines an optional website link."
            },
            "security_contact": {
              "type": "string",
              "description": "security_contact defines an optional email for security contact."
            },
            "details": {
              "type": "string",
              "description": "details define other optional details."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Description",
          "description": "Description defines a validator description."
        },
        "cosmos.staking.v1beta1.Validator": {
          "properties": {
            "operator_address": {
              "type": "string",
              "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
            },
            "consensus_pubkey": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "consensus_pubkey is the consensus public key of the validator, as a Protobuf Any."
            },
            "jailed": {
              "type": "boolean",
              "description": "jailed defined whether the validator has been jailed from bonded status or not."
            },
            "status": {
              "enum": [
                "BOND_STATUS_UNSPECIFIED",
                0,
                "BOND_STATUS_UNBONDED",
                1,
                "BOND_STATUS_UNBONDING",
                2,
                "BOND_STATUS_BONDED",
                3
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Bond Status",
              "description": "BondStatus is the status of a validator."
            },
            "tokens": {
              "type": "string",
              "description": "tokens define the delegated tokens (incl. self-delegation)."
            },
            "delegator_shares": {
              "type": "string",
              "description": "delegator_shares defines total shares issued to a validator's delegators."
            },
            "description": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
              "additionalProperties": true,
              "description": "description defines the description terms for the validator."
            },
            "unbonding_height": {
              "type": "string",
              "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
            },
            "unbonding_time": {
              "type": "string",
              "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
              "format": "date-time"
            },
            "commission": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Commission",
              "additionalProperties": true,
              "description": "commission defines the commission parameters."
            },
            "min_self_delegation": {
              "type": "string",
              "description": "min_self_delegation is the validator's self declared minimum self delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator",
          "description": "Validator defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_addr"
        ],
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryDelegatorValidator": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "DelegatorValidator",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorValidatorRequest",
      "definitions": {
        "QueryDelegatorValidatorRequest": {
          "properties": {
            "delegator_addr": {
              "type": "string",
              "description": "delegator_addr defines the delegator address to query for."
            },
            "validator_addr": {
              "type": "string",
              "description": "validator_addr defines the validator address to query for."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Validator Request",
          "description": "QueryDelegatorValidatorRequest is request type for the Query/DelegatorValidator RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDelegatorValidatorResponse",
      "definitions": {
        "QueryDelegatorValidatorResponse": {
          "properties": {
            "validator": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Validator",
              "additionalProperties": true,
              "description": "validator defines the the validator info."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Delegator Validator Response",
          "description": "QueryDelegatorValidatorResponse response type for the Query/DelegatorValidator RPC method."
        },
        "cosmos.staking.v1beta1.Commission": {
          "properties": {
            "commission_rates": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.CommissionRates",
              "additionalProperties": true,
              "description": "commission_rates defines the initial commission rates to be used for creating a validator."
            },
            "update_time": {
              "type": "string",
              "description": "update_time is the last time the commission rate was changed.",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission",
          "description": "Commission defines commission parameters for a given validator."
        },
        "cosmos.staking.v1beta1.CommissionRates": {
          "properties": {
            "rate": {
              "type": "string",
              "description": "rate is the commission rate charged to delegators, as a fraction."
            },
            "max_rate": {
              "type": "string",
              "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
            },
            "max_change_rate": {
              "type": "string",
              "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission Rates",
          "description": "CommissionRates defines the initial commission rates to be used for creating a validator."
        },
        "cosmos.staking.v1beta1.Description": {
          "properties": {
            "moniker": {
              "type": "string",
              "description": "moniker defines a human-readable name for the validator."
            },
            "identity": {
              "type": "string",
              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
            },
            "website": {
              "type": "string",
              "description": "website defines an optional website link."
            },
            "security_contact": {
              "type": "string",
              "description": "security_contact defines an optional email for security contact."
            },
            "details": {
              "type": "string",
              "description": "details define other optional details."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Description",
          "description": "Description defines a validator description."
        },
        "cosmos.staking.v1beta1.Validator": {
          "properties": {
            "operator_address": {
              "type": "string",
              "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
            },
            "consensus_pubkey": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "consensus_pubkey is the consensus public key of the validator, as a Protobuf Any."
            },
            "jailed": {
              "type": "boolean",
              "description": "jailed defined whether the validator has been jailed from bonded status or not."
            },
            "status": {
              "enum": [
                "BOND_STATUS_UNSPECIFIED",
                0,
                "BOND_STATUS_UNBONDED",
                1,
                "BOND_STATUS_UNBONDING",
                2,
                "BOND_STATUS_BONDED",
                3
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Bond Status",
              "description": "BondStatus is the status of a validator."
            },
            "tokens": {
              "type": "string",
              "description": "tokens define the delegated tokens (incl. self-delegation)."
            },
            "delegator_shares": {
              "type": "string",
              "description": "delegator_shares defines total shares issued to a validator's delegators."
            },
            "description": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
              "additionalProperties": true,
              "description": "description defines the description terms for the validator."
            },
            "unbonding_height": {
              "type": "string",
              "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
            },
            "unbonding_time": {
              "type": "string",
              "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
              "format": "date-time"
            },
            "commission": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Commission",
              "additionalProperties": true,
              "description": "commission defines the commission parameters."
            },
            "min_self_delegation": {
              "type": "string",
              "description": "min_self_delegation is the validator's self declared minimum self delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator",
          "description": "Validator defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "delegator_addr",
          "validator_addr"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryHistoricalInfo": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "HistoricalInfo",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryHistoricalInfoRequest",
      "definitions": {
        "QueryHistoricalInfoRequest": {
          "properties": {
            "height": {
              "type": "string",
              "description": "height defines at which height to query the historical info."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Historical Info Request",
          "description": "QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryHistoricalInfoResponse",
      "definitions": {
        "QueryHistoricalInfoResponse": {
          "properties": {
            "hist": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.HistoricalInfo",
              "additionalProperties": true,
              "description": "hist defines the historical info at the given height."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Historical Info Response",
          "description": "QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC method."
        },
        "cosmos.staking.v1beta1.Commission": {
          "properties": {
            "commission_rates": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.CommissionRates",
              "additionalProperties": true,
              "description": "commission_rates defines the initial commission rates to be used for creating a validator."
            },
            "update_time": {
              "type": "string",
              "description": "update_time is the last time the commission rate was changed.",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission",
          "description": "Commission defines commission parameters for a given validator."
        },
        "cosmos.staking.v1beta1.CommissionRates": {
          "properties": {
            "rate": {
              "type": "string",
              "description": "rate is the commission rate charged to delegators, as a fraction."
            },
            "max_rate": {
              "type": "string",
              "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
            },
            "max_change_rate": {
              "type": "string",
              "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission Rates",
          "description": "CommissionRates defines the initial commission rates to be used for creating a validator."
        },
        "cosmos.staking.v1beta1.Description": {
          "properties": {
            "moniker": {
              "type": "string",
              "description": "moniker defines a human-readable name for the validator."
            },
            "identity": {
              "type": "string",
              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
            },
            "website": {
              "type": "string",
              "description": "website defines an optional website link."
            },
            "security_contact": {
              "type": "string",
              "description": "security_contact defines an optional email for security contact."
            },
            "details": {
              "type": "string",
              "description": "details define other optional details."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Description",
          "description": "Description defines a validator description."
        },
        "cosmos.staking.v1beta1.HistoricalInfo": {
          "properties": {
            "header": {
              "$ref": "#/definitions/tendermint.types.Header",
              "additionalProperties": true
            },
            "valset": {
              "items": {
                "$ref": "#/definitions/cosmos.staking.v1beta1.Validator"
              },
              "type": "array"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Historical Info",
          "description": "HistoricalInfo contains header and validator information for a given block. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter)."
        },
        "cosmos.staking.v1beta1.Validator": {
          "properties": {
            "operator_address": {
              "type": "string",
              "description": "operator_address defines the address of the validator's operator; bech encoded in JSON."
            },
            "consensus_pubkey": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object",
              "description": "consensus_pubkey is the consensus public key of the validator, as a Protobuf Any."
            },
            "jailed": {
              "type": "boolean",
              "description": "jailed defined whether the validator has been jailed from bonded status or not."
            },
            "status": {
              "enum": [
                "BOND_STATUS_UNSPECIFIED",
                0,
                "BOND_STATUS_UNBONDED",
                1,
                "BOND_STATUS_UNBONDING",
                2,
                "BOND_STATUS_BONDED",
                3
              ],
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ],
              "title": "Bond Status",
              "description": "BondStatus is the status of a validator."
            },
            "tokens": {
              "type": "string",
              "description": "tokens define the delegated tokens (incl. self-delegation)."
            },
            "delegator_shares": {
              "type": "string",
              "description": "delegator_shares defines total shares issued to a validator's delegators."
            },
            "description": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
              "additionalProperties": true,
              "description": "description defines the description terms for the validator."
            },
            "unbonding_height": {
              "type": "string",
              "description": "unbonding_height defines, if unbonding, the height at which this validator has begun unbonding."
            },
            "unbonding_time": {
              "type": "string",
              "description": "unbonding_time defines, if unbonding, the min time for the validator to complete unbonding.",
              "format": "date-time"
            },
            "commission": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Commission",
              "additionalProperties": true,
              "description": "commission defines the commission parameters."
            },
            "min_self_delegation": {
              "type": "string",
              "description": "min_self_delegation is the validator's self declared minimum self delegation."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Validator",
          "description": "Validator defines a validator, together with the total amount of the Validator's bond shares and their exchange rate to coins. Slashing results in a decrease in the exchange rate, allowing correct calculation of future undelegations without iterating over delegators. When coins are delegated to this validator, the validator is credited with a delegation whose number of bond shares is based on the amount of coins delegated divided by the current exchange rate. Voting power can be calculated as total bonded shares multiplied by exchange rate."
        },
        "tendermint.types.BlockID": {
          "properties": {
            "hash": {
              "type": "string",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "part_set_header": {
              "$ref": "#/definitions/tendermint.types.PartSetHeader",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Block ID",
          "description": "BlockID"
        },
        "tendermint.types.Header": {
          "properties": {
            "version": {
              "$ref": "#/definitions/tendermint.version.Consensus",
              "additionalProperties": true,
              "description": "basic block info"
            },
            "chain_id": {
              "type": "string"
            },
            "height": {
              "type": "string"
            },
            "time": {
              "type": "string",
              "format": "date-time"
            },
            "last_block_id": {
              "$ref": "#/definitions/tendermint.types.BlockID",
              "additionalProperties": true,
              "description": "prev block info"
            },
            "last_commit_hash": {
              "type": "string",
              "description": "hashes of block data  commit from validators from the last block",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "data_hash": {
              "type": "string",
              "description": "transactions",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "validators_hash": {
              "type": "string",
              "description": "hashes from the app output from the prev block  validators for the current block",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "next_validators_hash": {
              "type": "string",
              "description": "validators for the next block",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "consensus_hash": {
              "type": "string",
              "description": "consensus params for current block",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "app_hash": {
              "type": "string",
              "description": "state after txs from the previous block",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "last_results_hash": {
              "type": "string",
              "description": "root hash of all results from the txs from the previous block",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "evidence_hash": {
              "type": "string",
              "description": "consensus info  evidence included in the block",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "proposer_address": {
              "type": "string",
              "description": "original proposer of the block",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "--------------------------------",
          "description": "--------------------------------  Header defines the structure of a Tendermint block header."
        },
        "tendermint.types.PartSetHeader": {
          "properties": {
            "total": {
              "type": "integer"
            },
            "hash": {
              "type": "string",
              "format": "binary",
              "binaryEncoding": "base64"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Part Set Header",
          "description": "PartsetHeader"
        },
        "tendermint.version.Consensus": {
          "properties": {
            "block": {
              "type": "string"
            },
            "app": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Consensus",
          "description": "Consensus captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application's state transition machine."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "height"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryPool": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Pool",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryPoolRequest",
      "definitions": {
        "QueryPoolRequest": {
          "additionalProperties": true,
          "type": "object",
          "title": "Query Pool Request",
          "description": "QueryPoolRequest is request type for the Query/Pool RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryPoolResponse",
      "definitions": {
        "QueryPoolResponse": {
          "properties": {
            "pool": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Pool",
              "additionalProperties": true,
              "description": "pool defines the pool info."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Pool Response",
          "description": "QueryPoolResponse is response type for the Query/Pool RPC method."
        },
        "cosmos.staking.v1beta1.Pool": {
          "properties": {
            "not_bonded_tokens": {
              "type": "string"
            },
            "bonded_tokens": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Pool",
          "description": "Pool is used for tracking bonded and not-bonded token supply of the bond denomination."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/QueryParams": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Params",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsRequest",
      "definitions": {
        "QueryParamsRequest": {
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Request",
          "description": "QueryParamsRequest is request type for the Query/Params RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsResponse",
      "definitions": {
        "QueryParamsResponse": {
          "properties": {
            "params": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Params",
              "additionalProperties": true,
              "description": "params holds all the parameters of this module."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Response",
          "description": "QueryParamsResponse is response type for the Query/Params RPC method."
        },
        "cosmos.staking.v1beta1.Params": {
          "properties": {
            "unbonding_time": {
              "pattern": "^([0-9]+\\.?[0-9]*|\\.[0-9]+)s$",
              "type": "string",
              "description": "unbonding_time is the time duration of unbonding.",
              "format": "regex"
            },
            "max_validators": {
              "type": "integer",
              "description": "max_validators is the maximum number of validators."
            },
            "max_entries": {
              "type": "integer",
              "description": "max_entries is the max entries for either unbonding delegation or redelegation (per pair/trio)."
            },
            "historical_entries": {
              "type": "integer",
              "description": "historical_entries is the number of historical entries to persist."
            },
            "bond_denom": {
              "type": "string",
              "description": "bond_denom defines the bondable coin denomination."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Params",
          "description": "Params defines the parameters for the staking module."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "cosmos.staking.v1beta1/sendMsgCreateValidator": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "CreateValidator",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateValidator",
      "definitions": {
        "MsgCreateValidator": {
          "properties": {
            "description": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
              "additionalProperties": true
            },
            "commission": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.CommissionRates",
              "additionalProperties": true
            },
            "min_self_delegation": {
              "type": "string"
            },
            "delegator_address": {
              "type": "string"
            },
            "validator_address": {
              "type": "string"
            },
            "pubkey": {
              "properties": {
                "type_url": {
                  "type": "string",
                  "description": "A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL's path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted). In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows: * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.) Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com. Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics."
                },
                "value": {
                  "type": "string",
                  "description": "Must be a valid serialized protocol buffer of the above specified type.",
                  "format": "binary",
                  "binaryEncoding": "base64"
                }
              },
              "additionalProperties": true,
              "type": "object"
            },
            "value": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Validator",
          "description": "MsgCreateValidator defines a SDK message for creating a new validator."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "cosmos.staking.v1beta1.CommissionRates": {
          "properties": {
            "rate": {
              "type": "string",
              "description": "rate is the commission rate charged to delegators, as a fraction."
            },
            "max_rate": {
              "type": "string",
              "description": "max_rate defines the maximum commission rate which validator can ever charge, as a fraction."
            },
            "max_change_rate": {
              "type": "string",
              "description": "max_change_rate defines the maximum daily increase of the validator commission, as a fraction."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Commission Rates",
          "description": "CommissionRates defines the initial commission rates to be used for creating a validator."
        },
        "cosmos.staking.v1beta1.Description": {
          "properties": {
            "moniker": {
              "type": "string",
              "description": "moniker defines a human-readable name for the validator."
            },
            "identity": {
              "type": "string",
              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
            },
            "website": {
              "type": "string",
              "description": "website defines an optional website link."
            },
            "security_contact": {
              "type": "string",
              "description": "security_contact defines an optional email for security contact."
            },
            "details": {
              "type": "string",
              "description": "details define other optional details."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Description",
          "description": "Description defines a validator description."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateValidatorResponse",
      "definitions": {
        "MsgCreateValidatorResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Validator Response",
          "description": "MsgCreateValidatorResponse defines the Msg/CreateValidator response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.staking.v1beta1/sendMsgEditValidator": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "EditValidator",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgEditValidator",
      "definitions": {
        "MsgEditValidator": {
          "properties": {
            "description": {
              "$ref": "#/definitions/cosmos.staking.v1beta1.Description",
              "additionalProperties": true
            },
            "validator_address": {
              "type": "string"
            },
            "commission_rate": {
              "type": "string",
              "description": "We pass a reference to the new commission rate and min self delegation as it's not mandatory to update. If not updated, the deserialized rate will be zero with no way to distinguish if an update was intended. REF: #2373"
            },
            "min_self_delegation": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Edit Validator",
          "description": "MsgEditValidator defines a SDK message for editing an existing validator."
        },
        "cosmos.staking.v1beta1.Description": {
          "properties": {
            "moniker": {
              "type": "string",
              "description": "moniker defines a human-readable name for the validator."
            },
            "identity": {
              "type": "string",
              "description": "identity defines an optional identity signature (ex. UPort or Keybase)."
            },
            "website": {
              "type": "string",
              "description": "website defines an optional website link."
            },
            "security_contact": {
              "type": "string",
              "description": "security_contact defines an optional email for security contact."
            },
            "details": {
              "type": "string",
              "description": "details define other optional details."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Description",
          "description": "Description defines a validator description."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgEditValidatorResponse",
      "definitions": {
        "MsgEditValidatorResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Edit Validator Response",
          "description": "MsgEditValidatorResponse defines the Msg/EditValidator response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.staking.v1beta1/sendMsgDelegate": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Delegate",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDelegate",
      "definitions": {
        "MsgDelegate": {
          "properties": {
            "delegator_address": {
              "type": "string"
            },
            "validator_address": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Delegate",
          "description": "MsgDelegate defines a SDK message for performing a delegation of coins from a delegator to a validator."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDelegateResponse",
      "definitions": {
        "MsgDelegateResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Delegate Response",
          "description": "MsgDelegateResponse defines the Msg/Delegate response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.staking.v1beta1/sendMsgBeginRedelegate": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "BeginRedelegate",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgBeginRedelegate",
      "definitions": {
        "MsgBeginRedelegate": {
          "properties": {
            "delegator_address": {
              "type": "string"
            },
            "validator_src_address": {
              "type": "string"
            },
            "validator_dst_address": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Begin Redelegate",
          "description": "MsgBeginRedelegate defines a SDK message for performing a redelegation of coins from a delegator and source validator to a destination validator."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgBeginRedelegateResponse",
      "definitions": {
        "MsgBeginRedelegateResponse": {
          "properties": {
            "completion_time": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Begin Redelegate Response",
          "description": "MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.staking.v1beta1/sendMsgUndelegate": {
    "module_name": "cosmos.staking.v1beta1",
    "name": "Undelegate",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUndelegate",
      "definitions": {
        "MsgUndelegate": {
          "properties": {
            "delegator_address": {
              "type": "string"
            },
            "validator_address": {
              "type": "string"
            },
            "amount": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Undelegate",
          "description": "MsgUndelegate defines a SDK message for performing an undelegation from a delegate and a validator."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUndelegateResponse",
      "definitions": {
        "MsgUndelegateResponse": {
          "properties": {
            "completion_time": {
              "type": "string",
              "format": "date-time"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Undelegate Response",
          "description": "MsgUndelegateResponse defines the Msg/Undelegate response type."
        }
      }
    },
    "http_rules": null
  },
  "cosmos.vesting.v1beta1/sendMsgCreateVestingAccount": {
    "module_name": "cosmos.vesting.v1beta1",
    "name": "CreateVestingAccount",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateVestingAccount",
      "definitions": {
        "MsgCreateVestingAccount": {
          "properties": {
            "from_address": {
              "type": "string"
            },
            "to_address": {
              "type": "string"
            },
            "amount": {
              "items": {
                "$ref": "#/definitions/cosmos.base.v1beta1.Coin"
              },
              "type": "array"
            },
            "end_time": {
              "type": "string"
            },
            "delayed": {
              "type": "boolean"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Vesting Account",
          "description": "MsgCreateVestingAccount defines a message that enables creating a vesting account."
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateVestingAccountResponse",
      "definitions": {
        "MsgCreateVestingAccountResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Vesting Account Response",
          "description": "MsgCreateVestingAccountResponse defines the Msg/CreateVestingAccount response type."
        }
      }
    },
    "http_rules": null
  },
  "ibc.applications.transfer.v1/QueryDenomTrace": {
    "module_name": "ibc.applications.transfer.v1",
    "name": "DenomTrace",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomTraceRequest",
      "definitions": {
        "QueryDenomTraceRequest": {
          "properties": {
            "hash": {
              "type": "string",
              "description": "hash (in hex format) of the denomination trace information."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denom Trace Request",
          "description": "QueryDenomTraceRequest is the request type for the Query/DenomTrace RPC method"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomTraceResponse",
      "definitions": {
        "QueryDenomTraceResponse": {
          "properties": {
            "denom_trace": {
              "$ref": "#/definitions/ibc.applications.transfer.v1.DenomTrace",
              "additionalProperties": true,
              "description": "denom_trace returns the requested denomination trace information."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denom Trace Response",
          "description": "QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC method."
        },
        "ibc.applications.transfer.v1.DenomTrace": {
          "properties": {
            "path": {
              "type": "string",
              "description": "path defines the chain of port/channel identifiers used for tracing the source of the fungible token."
            },
            "base_denom": {
              "type": "string",
              "description": "base denomination of the relayed fungible token."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Denom Trace",
          "description": "DenomTrace contains the base denomination for ICS20 fungible tokens and the source tracing information path."
        }
      }
    },
    "http_rules": [
      {
        "Params": [
          "hash"
        ],
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "ibc.applications.transfer.v1/QueryDenomTraces": {
    "module_name": "ibc.applications.transfer.v1",
    "name": "DenomTraces",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomTracesRequest",
      "definitions": {
        "QueryDenomTracesRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true,
              "description": "pagination defines an optional pagination for the request."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denom Traces Request",
          "description": "QueryConnectionsRequest is the request type for the Query/DenomTraces RPC method"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryDenomTracesResponse",
      "definitions": {
        "QueryDenomTracesResponse": {
          "properties": {
            "denom_traces": {
              "items": {
                "$ref": "#/definitions/ibc.applications.transfer.v1.DenomTrace"
              },
              "type": "array",
              "description": "denom_traces returns all denominations trace information."
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true,
              "description": "pagination defines the pagination in the response."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Denom Traces Response",
          "description": "QueryConnectionsResponse is the response type for the Query/DenomTraces RPC method."
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "ibc.applications.transfer.v1.DenomTrace": {
          "properties": {
            "path": {
              "type": "string",
              "description": "path defines the chain of port/channel identifiers used for tracing the source of the fungible token."
            },
            "base_denom": {
              "type": "string",
              "description": "base denomination of the relayed fungible token."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Denom Trace",
          "description": "DenomTrace contains the base denomination for ICS20 fungible tokens and the source tracing information path."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "ibc.applications.transfer.v1/QueryParams": {
    "module_name": "ibc.applications.transfer.v1",
    "name": "Params",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsRequest",
      "definitions": {
        "QueryParamsRequest": {
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Request",
          "description": "QueryParamsRequest is the request type for the Query/Params RPC method."
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryParamsResponse",
      "definitions": {
        "QueryParamsResponse": {
          "properties": {
            "params": {
              "$ref": "#/definitions/ibc.applications.transfer.v1.Params",
              "additionalProperties": true,
              "description": "params defines the parameters of the module."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Params Response",
          "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
        },
        "ibc.applications.transfer.v1.Params": {
          "properties": {
            "send_enabled": {
              "type": "boolean",
              "description": "send_enabled enables or disables all cross-chain token transfers from this chain."
            },
            "receive_enabled": {
              "type": "boolean",
              "description": "receive_enabled enables or disables all cross-chain token transfers to this chain."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Params",
          "description": "Params defines the set of IBC transfer parameters. NOTE: To prevent a single token from being transferred, set the TransfersEnabled parameter to true and then set the bank module's SendEnabled parameter for the denomination to false."
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": false,
        "HasBody": false
      }
    ]
  },
  "ibc.applications.transfer.v1/sendMsgTransfer": {
    "module_name": "ibc.applications.transfer.v1",
    "name": "Transfer",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgTransfer",
      "definitions": {
        "MsgTransfer": {
          "properties": {
            "source_port": {
              "type": "string",
              "description": "the port on which the packet will be sent"
            },
            "source_channel": {
              "type": "string",
              "description": "the channel by which the packet will be sent"
            },
            "token": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true,
              "description": "the tokens to be transferred"
            },
            "sender": {
              "type": "string",
              "description": "the sender address"
            },
            "receiver": {
              "type": "string",
              "description": "the recipient address on the destination chain"
            },
            "timeout_height": {
              "$ref": "#/definitions/ibc.core.client.v1.Height",
              "additionalProperties": true,
              "description": "Timeout height relative to the current block height. The timeout is disabled when set to 0."
            },
            "timeout_timestamp": {
              "type": "string",
              "description": "Timeout timestamp (in nanoseconds) relative to the current block timestamp. The timeout is disabled when set to 0."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Transfer",
          "description": "MsgTransfer defines a msg to transfer fungible tokens (i.e Coins) between ICS20 enabled chains. See ICS Spec here: https://github.com/cosmos/ics/tree/master/spec/ics-020-fungible-token-transfer#data-structures"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "ibc.core.client.v1.Height": {
          "properties": {
            "revision_number": {
              "type": "string",
              "description": "the revision that the client is currently on"
            },
            "revision_height": {
              "type": "string",
              "description": "the height within the given revision"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Height",
          "description": "Height is a monotonically increasing data type that can be compared against another Height for the purposes of updating and freezing clients Normally the RevisionHeight is incremented at each height while keeping RevisionNumber the same. However some consensus algorithms may choose to reset the height in certain conditions e.g. hard forks, state-machine breaking changes In these cases, the RevisionNumber is incremented so that height continues to be monitonically increasing even as the RevisionHeight gets reset"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgTransferResponse",
      "definitions": {
        "MsgTransferResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Transfer Response",
          "description": "MsgTransferResponse defines the Msg/Transfer response type."
        }
      }
    },
    "http_rules": null
  },
  "dyson/QuerySchedualedRun": {
    "module_name": "dyson",
    "name": "SchedualedRun",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetSchedualedRunRequest",
      "definitions": {
        "QueryGetSchedualedRunRequest": {
          "properties": {
            "index": {
              "type": "string",
              "description": "inxex is the script address"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Schedualed Run Request"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetSchedualedRunResponse",
      "definitions": {
        "QueryGetSchedualedRunResponse": {
          "properties": {
            "schedualed_run": {
              "$ref": "#/definitions/dyson.SchedualedRun",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Schedualed Run Response"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "dyson.MsgRun": {
          "properties": {
            "creator": {
              "type": "string",
              "description": "The account sending the transaction"
            },
            "address": {
              "type": "string",
              "description": "dys address of the scrit to call"
            },
            "extra_lines": {
              "type": "string",
              "description": "optional extra source code to append to the end of the script before running"
            },
            "function_name": {
              "type": "string",
              "description": "optional function to call"
            },
            "args": {
              "type": "string",
              "description": "optional args to call the function with"
            },
            "kwargs": {
              "type": "string",
              "description": "optional kwargs to run"
            },
            "coins": {
              "type": "string",
              "description": "optional comma seperated list of coins to send the script (for example \"123dys,456token\")"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run",
          "description": "MsgRun runs a script at a specific address"
        },
        "dyson.MsgRunResponse": {
          "properties": {
            "response": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run Response"
        },
        "dyson.SchedualedRun": {
          "properties": {
            "index": {
              "type": "string"
            },
            "creator": {
              "type": "string"
            },
            "height": {
              "type": "string"
            },
            "gas": {
              "type": "string"
            },
            "msg": {
              "$ref": "#/definitions/dyson.MsgRun",
              "additionalProperties": true
            },
            "resp": {
              "$ref": "#/definitions/dyson.MsgRunResponse",
              "additionalProperties": true
            },
            "error": {
              "type": "string"
            },
            "gasprice": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            },
            "fee": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Schedualed Run"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QuerySchedualedRunAll": {
    "module_name": "dyson",
    "name": "SchedualedRunAll",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllSchedualedRunRequest",
      "definitions": {
        "QueryAllSchedualedRunRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Schedualed Run Request"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllSchedualedRunResponse",
      "definitions": {
        "QueryAllSchedualedRunResponse": {
          "properties": {
            "schedualed_run": {
              "items": {
                "$ref": "#/definitions/dyson.SchedualedRun"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Schedualed Run Response"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "cosmos.base.v1beta1.Coin": {
          "properties": {
            "denom": {
              "type": "string"
            },
            "amount": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Coin",
          "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
        },
        "dyson.MsgRun": {
          "properties": {
            "creator": {
              "type": "string",
              "description": "The account sending the transaction"
            },
            "address": {
              "type": "string",
              "description": "dys address of the scrit to call"
            },
            "extra_lines": {
              "type": "string",
              "description": "optional extra source code to append to the end of the script before running"
            },
            "function_name": {
              "type": "string",
              "description": "optional function to call"
            },
            "args": {
              "type": "string",
              "description": "optional args to call the function with"
            },
            "kwargs": {
              "type": "string",
              "description": "optional kwargs to run"
            },
            "coins": {
              "type": "string",
              "description": "optional comma seperated list of coins to send the script (for example \"123dys,456token\")"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run",
          "description": "MsgRun runs a script at a specific address"
        },
        "dyson.MsgRunResponse": {
          "properties": {
            "response": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run Response"
        },
        "dyson.SchedualedRun": {
          "properties": {
            "index": {
              "type": "string"
            },
            "creator": {
              "type": "string"
            },
            "height": {
              "type": "string"
            },
            "gas": {
              "type": "string"
            },
            "msg": {
              "$ref": "#/definitions/dyson.MsgRun",
              "additionalProperties": true
            },
            "resp": {
              "$ref": "#/definitions/dyson.MsgRunResponse",
              "additionalProperties": true
            },
            "error": {
              "type": "string"
            },
            "gasprice": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            },
            "fee": {
              "$ref": "#/definitions/cosmos.base.v1beta1.Coin",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Schedualed Run"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QueryStorage": {
    "module_name": "dyson",
    "name": "Storage",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetStorageRequest",
      "definitions": {
        "QueryGetStorageRequest": {
          "properties": {
            "index": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Storage Request"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetStorageResponse",
      "definitions": {
        "QueryGetStorageResponse": {
          "properties": {
            "storage": {
              "$ref": "#/definitions/dyson.Storage",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Storage Response"
        },
        "dyson.Storage": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "index": {
              "type": "string"
            },
            "data": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Storage"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QueryStorageAll": {
    "module_name": "dyson",
    "name": "StorageAll",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllStorageRequest",
      "definitions": {
        "QueryAllStorageRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Storage Request"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllStorageResponse",
      "definitions": {
        "QueryAllStorageResponse": {
          "properties": {
            "storage": {
              "items": {
                "$ref": "#/definitions/dyson.Storage"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Storage Response"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "dyson.Storage": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "index": {
              "type": "string"
            },
            "data": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Storage"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QueryScript": {
    "module_name": "dyson",
    "name": "Script",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetScriptRequest",
      "definitions": {
        "QueryGetScriptRequest": {
          "properties": {
            "index": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Script Request"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetScriptResponse",
      "definitions": {
        "QueryGetScriptResponse": {
          "properties": {
            "script": {
              "$ref": "#/definitions/dyson.Script",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Script Response"
        },
        "dyson.Script": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "index": {
              "type": "string"
            },
            "code": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Script"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QuerySchema": {
    "module_name": "dyson",
    "name": "Schema",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetSchemaRequest",
      "definitions": {
        "QueryGetSchemaRequest": {
          "properties": {
            "index": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Schema Request"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryGetSchemaResponse",
      "definitions": {
        "QueryGetSchemaResponse": {
          "properties": {
            "schema": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Get Schema Response"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QueryWsgi": {
    "module_name": "dyson",
    "name": "Wsgi",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryWsgiRequest",
      "definitions": {
        "QueryWsgiRequest": {
          "properties": {
            "index": {
              "type": "string"
            },
            "httprequest": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Wsgi Request"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryWsgiResponse",
      "definitions": {
        "QueryWsgiResponse": {
          "properties": {
            "httpresponse": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Wsgi Response"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QueryQueryScript": {
    "module_name": "dyson",
    "name": "QueryScript",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRun",
      "definitions": {
        "MsgRun": {
          "properties": {
            "creator": {
              "type": "string",
              "description": "The account sending the transaction"
            },
            "address": {
              "type": "string",
              "description": "dys address of the scrit to call"
            },
            "extra_lines": {
              "type": "string",
              "description": "optional extra source code to append to the end of the script before running"
            },
            "function_name": {
              "type": "string",
              "description": "optional function to call"
            },
            "args": {
              "type": "string",
              "description": "optional args to call the function with"
            },
            "kwargs": {
              "type": "string",
              "description": "optional kwargs to run"
            },
            "coins": {
              "type": "string",
              "description": "optional comma seperated list of coins to send the script (for example \"123dys,456token\")"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run",
          "description": "MsgRun runs a script at a specific address"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRunResponse",
      "definitions": {
        "MsgRunResponse": {
          "properties": {
            "response": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run Response"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QueryScriptAll": {
    "module_name": "dyson",
    "name": "ScriptAll",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllScriptRequest",
      "definitions": {
        "QueryAllScriptRequest": {
          "properties": {
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Script Request"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryAllScriptResponse",
      "definitions": {
        "QueryAllScriptResponse": {
          "properties": {
            "Script": {
              "items": {
                "$ref": "#/definitions/dyson.Script"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query All Script Response"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "dyson.Script": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "index": {
              "type": "string"
            },
            "code": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Script"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/QueryPrefixStorage": {
    "module_name": "dyson",
    "name": "PrefixStorage",
    "service_name": "Query",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryPrefixStorageRequest",
      "definitions": {
        "QueryPrefixStorageRequest": {
          "properties": {
            "prefix": {
              "type": "string"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageRequest",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Prefix Storage Request"
        },
        "cosmos.base.query.v1beta1.PageRequest": {
          "properties": {
            "key": {
              "type": "string",
              "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "offset": {
              "type": "string",
              "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set."
            },
            "limit": {
              "type": "string",
              "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app."
            },
            "count_total": {
              "type": "boolean",
              "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set."
            },
            "reverse": {
              "type": "boolean",
              "description": "reverse is set to true if results are to be returned in the descending order."
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Request",
          "description": "PageRequest is to be embedded in gRPC request messages for efficient pagination. Ex:  message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/QueryPrefixStorageResponse",
      "definitions": {
        "QueryPrefixStorageResponse": {
          "properties": {
            "storage": {
              "items": {
                "$ref": "#/definitions/dyson.Storage"
              },
              "type": "array"
            },
            "pagination": {
              "$ref": "#/definitions/cosmos.base.query.v1beta1.PageResponse",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Query Prefix Storage Response"
        },
        "cosmos.base.query.v1beta1.PageResponse": {
          "properties": {
            "next_key": {
              "type": "string",
              "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently",
              "format": "binary",
              "binaryEncoding": "base64"
            },
            "total": {
              "type": "string",
              "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Page Response",
          "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
        },
        "dyson.Storage": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "index": {
              "type": "string"
            },
            "data": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Storage"
        }
      }
    },
    "http_rules": [
      {
        "Params": null,
        "HasQuery": true,
        "HasBody": false
      }
    ]
  },
  "dyson/sendMsgCreateSchedualedRun": {
    "module_name": "dyson",
    "name": "CreateSchedualedRun",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateSchedualedRun",
      "definitions": {
        "MsgCreateSchedualedRun": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "height": {
              "type": "string"
            },
            "gas": {
              "type": "string"
            },
            "msg": {
              "$ref": "#/definitions/dyson.MsgRun",
              "additionalProperties": true
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Schedualed Run"
        },
        "dyson.MsgRun": {
          "properties": {
            "creator": {
              "type": "string",
              "description": "The account sending the transaction"
            },
            "address": {
              "type": "string",
              "description": "dys address of the scrit to call"
            },
            "extra_lines": {
              "type": "string",
              "description": "optional extra source code to append to the end of the script before running"
            },
            "function_name": {
              "type": "string",
              "description": "optional function to call"
            },
            "args": {
              "type": "string",
              "description": "optional args to call the function with"
            },
            "kwargs": {
              "type": "string",
              "description": "optional kwargs to run"
            },
            "coins": {
              "type": "string",
              "description": "optional comma seperated list of coins to send the script (for example \"123dys,456token\")"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run",
          "description": "MsgRun runs a script at a specific address"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateSchedualedRunResponse",
      "definitions": {
        "MsgCreateSchedualedRunResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Schedualed Run Response"
        }
      }
    },
    "http_rules": null
  },
  "dyson/sendMsgCreateStorage": {
    "module_name": "dyson",
    "name": "CreateStorage",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateStorage",
      "definitions": {
        "MsgCreateStorage": {
          "properties": {
            "creator": {
              "type": "string",
              "description": "The address signing this transaction"
            },
            "index": {
              "type": "string",
              "description": "Name of the Storage, must be prefixed with the creators address (for example: \"dys..1a3/some_name\")"
            },
            "data": {
              "type": "string",
              "description": "data to stor at this index"
            },
            "force": {
              "type": "boolean",
              "description": "If true, force will always store the data at this address regardless of already existing storage"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Storage",
          "description": "Create a new storage of arbitrary text"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateStorageResponse",
      "definitions": {
        "MsgCreateStorageResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Storage Response"
        }
      }
    },
    "http_rules": null
  },
  "dyson/sendMsgUpdateStorage": {
    "module_name": "dyson",
    "name": "UpdateStorage",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUpdateStorage",
      "definitions": {
        "MsgUpdateStorage": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "index": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "force": {
              "type": "boolean"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Update Storage"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUpdateStorageResponse",
      "definitions": {
        "MsgUpdateStorageResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Update Storage Response"
        }
      }
    },
    "http_rules": null
  },
  "dyson/sendMsgDeleteStorage": {
    "module_name": "dyson",
    "name": "DeleteStorage",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDeleteStorage",
      "definitions": {
        "MsgDeleteStorage": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "index": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Delete Storage"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDeleteStorageResponse",
      "definitions": {
        "MsgDeleteStorageResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Delete Storage Response"
        }
      }
    },
    "http_rules": null
  },
  "dyson/sendMsgCreateScript": {
    "module_name": "dyson",
    "name": "CreateScript",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateScript",
      "definitions": {
        "MsgCreateScript": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "code": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Script"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgCreateScriptResponse",
      "definitions": {
        "MsgCreateScriptResponse": {
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Create Script Response"
        }
      }
    },
    "http_rules": null
  },
  "dyson/sendMsgUpdateScript": {
    "module_name": "dyson",
    "name": "UpdateScript",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUpdateScript",
      "definitions": {
        "MsgUpdateScript": {
          "properties": {
            "creator": {
              "type": "string"
            },
            "code": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Update Script"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgUpdateScriptResponse",
      "definitions": {
        "MsgUpdateScriptResponse": {
          "properties": {
            "address": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Update Script Response"
        }
      }
    },
    "http_rules": null
  },
  "dyson/sendMsgDeleteScript": {
    "module_name": "dyson",
    "name": "DeleteScript",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDeleteScript",
      "definitions": {
        "MsgDeleteScript": {
          "properties": {
            "creator": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Delete Script"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgDeleteScriptResponse",
      "definitions": {
        "MsgDeleteScriptResponse": {
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Delete Script Response"
        }
      }
    },
    "http_rules": null
  },
  "dyson/sendMsgRun": {
    "module_name": "dyson",
    "name": "Run",
    "service_name": "Msg",
    "request_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRun",
      "definitions": {
        "MsgRun": {
          "properties": {
            "creator": {
              "type": "string",
              "description": "The account sending the transaction"
            },
            "address": {
              "type": "string",
              "description": "dys address of the scrit to call"
            },
            "extra_lines": {
              "type": "string",
              "description": "optional extra source code to append to the end of the script before running"
            },
            "function_name": {
              "type": "string",
              "description": "optional function to call"
            },
            "args": {
              "type": "string",
              "description": "optional args to call the function with"
            },
            "kwargs": {
              "type": "string",
              "description": "optional kwargs to run"
            },
            "coins": {
              "type": "string",
              "description": "optional comma seperated list of coins to send the script (for example \"123dys,456token\")"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run",
          "description": "MsgRun runs a script at a specific address"
        }
      }
    },
    "resp_schema": {
      "$schema": "http://json-schema.org/draft-04/schema#",
      "$ref": "#/definitions/MsgRunResponse",
      "definitions": {
        "MsgRunResponse": {
          "properties": {
            "response": {
              "type": "string"
            }
          },
          "additionalProperties": true,
          "type": "object",
          "title": "Msg Run Response"
        }
      }
    },
    "http_rules": null
  }
}